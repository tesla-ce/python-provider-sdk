name: Build Documentation
on:
  push:
    branches: [ main ]
  release:
    types: 
      - created
  workflow_dispatch:

jobs:
  check:
    runs-on: ubuntu-latest    
    steps: 
      - uses: actions/checkout@v2
      - name: Get version values
        id: vars
        run: |          
          echo ::set-output name=version::$(cat src/tesla_ce_provider/data/VERSION)
          echo ::set-output name=tag::${GITHUB_REF#refs/*/}                
      - name: Show captured versions
        run: |
          echo 'Version in source code: ${{ steps.vars.outputs.version }}'
          echo 'Release version: ${{ steps.vars.outputs.tag }}'                    
      - name: Check version tag
        uses: nick-invision/assert-action@v1.1.0
        if: github.event_name == 'release'
        with:
          expected: ${{ steps.vars.outputs.tag }}
          actual: ${{ steps.vars.outputs.version }}
          comparison: exact  
  build:
    needs: check
    runs-on: ubuntu-latest
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Get version value
        id: vars
        run: |          
          echo ::set-output name=version::$(cat src/tesla_ce_provider/data/VERSION)
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.9
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip mkdocs mkdocstrings mkdocs-material mike
          if [ -f requirements.in ]; then pip-compile; fi
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      - name: Setup doc deploy
        run: |
          git config --global user.name Xavier Baro
          git config --global user.email xbaro@uoc.edu
      - name: Update current documentation
        if: github.event_name != 'release'
        run: |
          mike deploy --push ${{ steps.vars.outputs.version }}
        env:
          DEBUG: True
      - name: Update latest documentation
        if: github.event_name == 'release'
        run: |
          mike deploy --push --update-aliases ${{ steps.vars.outputs.version }} latest
          mike set-default --push latest
        env:
          DEBUG: True

