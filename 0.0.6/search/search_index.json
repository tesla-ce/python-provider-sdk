{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"TeSLA CE Providers Python SDK :warning: This repository is under construction . Final release of TeSLA Community Edition source code is expected by the end of 2021","title":"Home"},{"location":"#tesla-ce-providers-python-sdk","text":":warning: This repository is under construction . Final release of TeSLA Community Edition source code is expected by the end of 2021","title":"TeSLA CE Providers Python SDK"},{"location":"client/","text":"Provider TeSLA CE Provider Package celery_app Celery client module message special TeSLA CE Messages package integrity TeSLA CE Integrity Messages module Integrity ( Enum ) Message codes related to Integrity provider TeSLA CE Provider Messages module Provider ( Enum ) Message codes related to Providers sensor TeSLA CE Sensor Messages module Sensor ( Enum ) Message codes related to Sensors status TeSLA CE Status Messages module Status ( Enum ) Message codes related to Status models special TeSLA CE Base Provider models package base TeSLA CE Base Provider base model module Request Request object class for providers activity_id property readonly Get Activity ID Returns: Type Description int Activity unique identifier in the API context property readonly Get the context provided by the sensors Returns: Type Description dict Context information for the request course_id property readonly Get Course ID Returns: Type Description int Course unique identifier in the API data property readonly Get request data Returns: Type Description str The base64 codification of the sample as provided by sensors instruments property readonly Get the list of instruments selected for this request Returns: Type Description list List of instrument id's learner_id property readonly Get Learner ID Returns: Type Description str UUIDv4 id of the learner owning this request metadata property readonly Get the metadata provided by the sensors Returns: Type Description dict Metadata information for the request mime_type property readonly Get the mime type of the request Returns: Type Description str Request mime type request_id property readonly Get Request ID Returns: Type Description int Request unique identifier in the API session_id property readonly Get Session ID Returns: Type Description int Session unique identifier in the API __init__ ( self , object ) special Base constructor, that creates the object from JSON description Parameters: Name Type Description Default object dict JSON dictionary of a request required Source code in tesla_ce_provider/models/base.py def __init__ ( self , object ): \"\"\" Base constructor, that creates the object from JSON description :param object: JSON dictionary of a request :type object: dict \"\"\" if 'request' in object : self . _object = object [ 'request' ] else : self . _object = object Sample Sample object class for providers context property readonly Get the context provided by the sensors Returns: Type Description dict Context information for the sample data property readonly Get sample data Returns: Type Description str The base64 codification of the sample as provided by sensors instruments property readonly Get the list of instruments selected for this sample Returns: Type Description list List of instrument id's learner_id property readonly Get Learner ID Returns: Type Description str UUIDv4 id of the learner owning this sample metadata property readonly Get the metadata provided by the sensors Returns: Type Description dict Metadata information for the sample mime_type property readonly Get the mime type of the request Returns: Type Description str Request mime type sample_id property readonly Get Sample ID Returns: Type Description int Sample unique identifier in the API validations property readonly Get available validations for this sample Returns: Type Description Union[generat,] A generator providing all available validations __init__ ( self , object ) special Base constructor, that creates the object from JSON description Parameters: Name Type Description Default object dict JSON dictionary of a sample required Source code in tesla_ce_provider/models/base.py def __init__ ( self , object ): \"\"\" Base constructor, that creates the object from JSON description :param object: JSON dictionary of a sample :type object: dict \"\"\" if 'sample' in object : self . _object = object [ 'sample' ] else : self . _object = object ValidationData Validation class for providers __init__ ( self , data_object = None ) special Default constructor Source code in tesla_ce_provider/models/base.py def __init__ ( self , data_object = None ): \"\"\" Default constructor \"\"\" #: Instrument self . instrument = None #: Additional information self . info = None #: Provider information self . provider = None if data_object is not None : self . load ( data_object ) load ( self , object ) Load an object from a JSON representation Parameters: Name Type Description Default object dict JSON representation of the object required Returns: Type Description bool Whether this object is a valid representation or not Source code in tesla_ce_provider/models/base.py def load ( self , object ): \"\"\" Load an object from a JSON representation :param object: JSON representation of the object :type object: dict :return: Whether this object is a valid representation or not :rtype: bool \"\"\" if 'provider' in object and 'instrument' in object and 'info' in object : self . provider = object [ 'provider' ] self . instrument = object [ 'instrument' ] self . info = object [ 'info' ] return True return False set_info ( self , info ) Set additional information specific for the provider Parameters: Name Type Description Default info dict Additional information required Source code in tesla_ce_provider/models/base.py def set_info ( self , info ): \"\"\" Set additional information specific for the provider :param info: Additional information :type info: dict \"\"\" self . info = info set_instrument ( self , id , acronym ) Set the information for the instrument Parameters: Name Type Description Default id int Id of the instrument required acronym str Acronym of the instrument required Source code in tesla_ce_provider/models/base.py def set_instrument ( self , id , acronym ): \"\"\" Set the information for the instrument :param id: Id of the instrument :type id: int :param acronym: Acronym of the instrument :type acronym: str \"\"\" self . instrument = { 'id' : id , 'acronym' : acronym } set_provider ( self , id , acronym , version ) Set the information for the provider that performed the validation Parameters: Name Type Description Default id int Id of the provider required acronym str Acronym of the provider required version str Version of the provider implementation required Source code in tesla_ce_provider/models/base.py def set_provider ( self , id , acronym , version ): \"\"\" Set the information for the provider that performed the validation :param id: Id of the provider :type id: int :param acronym: Acronym of the provider :type acronym: str :param version: Version of the provider implementation :type version: str \"\"\" self . provider = { 'id' : id , 'acronym' : acronym , 'version' : version } to_json ( self ) Get a JSON representation of the object Returns: Type Description dict JSON representation Source code in tesla_ce_provider/models/base.py def to_json ( self ): \"\"\" Get a JSON representation of the object :return: JSON representation :rtype: dict \"\"\" return { 'provider' : self . provider , 'instrument' : self . instrument , 'info' : self . info } fr TeSLA CE Base Provider Face Recognition models module FRValidationData ( ValidationData ) Validation class for Face Recognition providers load ( self , object ) Load an object from a JSON representation Parameters: Name Type Description Default object dict JSON representation of the object required Returns: Type Description bool Whether this object is a valid representation or not Source code in tesla_ce_provider/models/fr.py def load ( self , object ): \"\"\" Load an object from a JSON representation :param object: JSON representation of the object :type object: dict :return: Whether this object is a valid representation or not :rtype: bool \"\"\" if super () . load ( object ) and 'face_location' in object and 'pose' in object : self . face_location = object [ 'face_location' ] self . pose = object [ 'pose' ] return True return False set_location ( self , left , top , height , width ) Set the face coordinates in image Parameters: Name Type Description Default left float Left coordinate required top float Top coordinate required height float Height of the face region required width float Width of the face region required Source code in tesla_ce_provider/models/fr.py def set_location ( self , left , top , height , width ): \"\"\" Set the face coordinates in image :param left: Left coordinate :type left: float :param top: Top coordinate :type top: float :param height: Height of the face region :type height: float :param width: Width of the face region :type width: float \"\"\" self . face_location = { 'left' : left , 'top' : top , 'height' : height , 'width' : width } set_pose ( self , roll , yaw , pitch ) Set head pose estimation Parameters: Name Type Description Default roll float Roll value required yaw float Yaw value required pitch float Pith value required Source code in tesla_ce_provider/models/fr.py def set_pose ( self , roll , yaw , pitch ): \"\"\" Set head pose estimation :param roll: Roll value :type roll: float :param yaw: Yaw value :type yaw: float :param pitch: Pith value :type pitch: float \"\"\" self . pose = { 'roll' : roll , 'yaw' : yaw , 'pitch' : pitch } to_json ( self ) Get a JSON representation of the object Returns: Type Description dict JSON representation Source code in tesla_ce_provider/models/fr.py def to_json ( self ): \"\"\" Get a JSON representation of the object :return: JSON representation :rtype: dict \"\"\" base_json = super () . to_json () base_json . update ( { 'face_location' : self . face_location , 'pose' : self . pose } ) return base_json model TeSLA CE Base Provider base model module BaseModel Model class for providers __init__ ( self , model_object = None ) special Default constructor Source code in tesla_ce_provider/models/model.py def __init__ ( self , model_object = None ): \"\"\" Default constructor \"\"\" #: Current enrolment percentage self . _percentage = 0.0 #: List of samples included in this model self . _samples = [] #: Model data self . _data = None if model_object is not None : self . load ( model_object ) add_sample ( self , sample , features = None ) Add given sample to model Parameters: Name Type Description Default sample tesla_ce_provider.models.base.Sample Sample object required features dict Optional provider representation for this sample None Source code in tesla_ce_provider/models/model.py def add_sample ( self , sample , features = None ): \"\"\" Add given sample to model :param sample: Sample object :type sample: tesla_ce_provider.models.base.Sample :param features: Optional provider representation for this sample :type features: dict \"\"\" self . _samples . append ({ 'id' : sample . sample_id , 'features' : features }) can_analyse ( self ) Check if current model is able to be used or need more enrolment samples Returns: Type Description bool True if this model can be used or False otherwise Source code in tesla_ce_provider/models/model.py def can_analyse ( self ): \"\"\" Check if current model is able to be used or need more enrolment samples :return: True if this model can be used or False otherwise :rtype: bool \"\"\" raise NotImplementedError ( 'Method not implemented' ) get_percentage ( self ) Get the enrolment percentage Returns: Type Description float Enrolment percentage Source code in tesla_ce_provider/models/model.py def get_percentage ( self ): \"\"\" Get the enrolment percentage :return: Enrolment percentage :rtype: float \"\"\" return self . _percentage get_sample_id ( self , idx ) Return the sample ID from the index in the list of samples in the model Parameters: Name Type Description Default idx int Index in the list of samples required Returns: Type Description int Enrolment sample ID Source code in tesla_ce_provider/models/model.py def get_sample_id ( self , idx ): \"\"\" Return the sample ID from the index in the list of samples in the model :param idx: Index in the list of samples :type idx: int :return: Enrolment sample ID :rtype: int \"\"\" if idx < 0 or idx > len ( self . _samples ) - 1 : return None return list ( self . _samples )[ idx ][ 'id' ] get_samples ( self ) Get samples stored in the model Returns: Type Description Sample generator Source code in tesla_ce_provider/models/model.py def get_samples ( self ): \"\"\" Get samples stored in the model :return: Sample generator \"\"\" for sample in self . _samples : yield sample get_used_samples ( self ) Return a list of the sample IDs used by this model Returns: Type Description list List of sample ID's Source code in tesla_ce_provider/models/model.py def get_used_samples ( self ): \"\"\" Return a list of the sample IDs used by this model :return: List of sample ID's :rtype: list \"\"\" used_samples = [] for sample in self . _samples : used_samples . append ( sample [ 'id' ]) return used_samples load ( self , model_object ) Load an object from a JSON representation Parameters: Name Type Description Default model_object dict JSON representation of the object required Returns: Type Description bool Whether this object is a valid representation or not Source code in tesla_ce_provider/models/model.py def load ( self , model_object ): \"\"\" Load an object from a JSON representation :param model_object: JSON representation of the object :type model_object: dict :return: Whether this object is a valid representation or not :rtype: bool \"\"\" if 'percentage' in model_object and 'samples' in model_object and 'data' in model_object : self . _percentage = model_object [ 'percentage' ] self . _samples = model_object [ 'samples' ] self . _data = model_object [ 'data' ] return True return False set_data ( self , data ) Set model data Parameters: Name Type Description Default data dict Model data required Source code in tesla_ce_provider/models/model.py def set_data ( self , data ): \"\"\" Set model data :param data: Model data :type data: dict \"\"\" self . _data = data to_json ( self ) Get a JSON representation of the object Returns: Type Description dict JSON representation Source code in tesla_ce_provider/models/model.py def to_json ( self ): \"\"\" Get a JSON representation of the object :return: JSON representation :rtype: dict \"\"\" return { 'percentage' : self . _percentage , 'samples' : self . _samples , 'data' : self . _data } SimpleModel ( BaseModel ) Simple Model based on a list of reference samples add_sample ( self , sample , features = None ) Add given sample to model and update the enrolment percentage Parameters: Name Type Description Default sample tesla_ce_provider.models.base.Sample Sample object required features dict Optional provider representation for this sample None Source code in tesla_ce_provider/models/model.py def add_sample ( self , sample , features = None ): \"\"\" Add given sample to model and update the enrolment percentage :param sample: Sample object :type sample: tesla_ce_provider.models.base.Sample :param features: Optional provider representation for this sample :type features: dict \"\"\" super () . add_sample ( sample , features ) self . _percentage = min ( 1.0 , float ( len ( self . _samples )) / float ( self . _required_samples )) can_analyse ( self ) Check if current model is able to be used or need more enrolment samples Returns: Type Description bool True if this model can be used or False otherwise Source code in tesla_ce_provider/models/model.py def can_analyse ( self ): \"\"\" Check if current model is able to be used or need more enrolment samples :return: True if this model can be used or False otherwise :rtype: bool \"\"\" return len ( self . _samples ) >= self . _min_required_samples load ( self , model_object ) Load an object from a JSON representation Parameters: Name Type Description Default model_object dict JSON representation of the object required Returns: Type Description bool Whether this object is a valid representation or not Source code in tesla_ce_provider/models/model.py def load ( self , model_object ): \"\"\" Load an object from a JSON representation :param model_object: JSON representation of the object :type model_object: dict :return: Whether this object is a valid representation or not :rtype: bool \"\"\" if super () . load ( model_object ) and 'min_required_samples' in model_object and 'required_samples' in model_object : self . _min_required_samples = model_object [ 'percentage' ] self . _required_samples = model_object [ 'required_samples' ] return True return False set_min_required_samples ( self , num_samples ) Set the minimum number of samples required to be able to analyse Parameters: Name Type Description Default num_samples int Number of samples required Source code in tesla_ce_provider/models/model.py def set_min_required_samples ( self , num_samples ): \"\"\" Set the minimum number of samples required to be able to analyse :param num_samples: Number of samples :type num_samples: int \"\"\" self . _min_required_samples = num_samples set_required_samples ( self , num_samples ) Set the number of samples required for this model Parameters: Name Type Description Default num_samples int Number of samples required Source code in tesla_ce_provider/models/model.py def set_required_samples ( self , num_samples ): \"\"\" Set the number of samples required for this model :param num_samples: Number of samples :type num_samples: int \"\"\" self . _required_samples = num_samples parser TeSLA CE Base Provider base model module parse_validation_data ( object ) Load a ValidationData object from a JSON representation Parameters: Name Type Description Default object dict JSON representation of the object required Returns: Type Description FRValidationData | The specific validation object for this data or None if is an invalid JSON representation Source code in tesla_ce_provider/models/parser.py def parse_validation_data ( object ): \"\"\" Load a ValidationData object from a JSON representation :param object: JSON representation of the object :type object: dict :return: The specific validation object for this data or None if is an invalid JSON representation :rtype: FRValidationData | \"\"\" base = ValidationData () specific = None if base . load ( object ): if base . instrument [ 'acronym' ] == 'fr' : specific = FRValidationData () elif base . instrument [ 'acronym' ] == 'vr' : # TODO: Add VR validation data pass elif base . instrument [ 'acronym' ] == 'ks' : # TODO: Add KS validation data pass # Load the object with the specific data if specific is None or not specific . load ( object ): return None return specific provider special TeSLA CE Base Provider package audit special TeSLA CE Audit package base TeSLA CE Provider Base Audit module BaseAudit Base Audit class __init__ ( self , alerts = None , warnings = None ) special Create an audit object Parameters: Name Type Description Default alerts list List of alerts None warnings list List of warnings None Source code in tesla_ce_provider/provider/audit/base.py def __init__ ( self , alerts = None , warnings = None ): \"\"\" Create an audit object :param alerts: List of alerts :type alerts: list :param warnings: List of warnings :type warnings: list \"\"\" self . alerts = [] self . warnings = [] if alerts is not None : self . alerts += alerts if warnings is not None : self . warnings += warnings fr TeSLA CE Face Recognition Provider Audit module DetectedFace Instance of a detected face FaceRecognitionAudit ( BaseAudit ) Base Audit for Face Recognition providers class __init__ ( self , alerts = None , warnings = None , faces = None ) special Create a face recognition audit Parameters: Name Type Description Default alerts list List of alerts None warnings list List of warnings None faces list List of detected faces None Source code in tesla_ce_provider/provider/audit/fr.py def __init__ ( self , alerts = None , warnings = None , faces = None ): \"\"\" Create a face recognition audit :param alerts: List of alerts :type alerts: list :param warnings: List of warnings :type warnings: list :param faces: List of detected faces :type faces: list \"\"\" super () . __init__ ( alerts , warnings ) self . faces = [] if faces is not None : self . faces += faces add_face ( self , coordinates , score , most_similar = None , info = None , image = None ) Add a new detected face to the results Parameters: Name Type Description Default coordinates list Coordinates of the detected face required score float Score of the recognition required most_similar int ID of the most similar enrolment sample None info dict Additional information for detected face None image str Base64 encoded image for the detected face None Source code in tesla_ce_provider/provider/audit/fr.py def add_face ( self , coordinates , score , most_similar = None , info = None , image = None ): \"\"\" Add a new detected face to the results :param coordinates: Coordinates of the detected face :type coordinates: list :param score: Score of the recognition :type score: float :param most_similar: ID of the most similar enrolment sample :type most_similar: int :param info: Additional information for detected face :type info: dict :param image: Base64 encoded image for the detected face :type image: str \"\"\" new_face = DetectedFace () new_face . coordinates = coordinates new_face . score = score new_face . most_similar_sample = most_similar new_face . info = info new_face . image = image self . faces . append ( new_face ) tp TeSLA CE Plagiarism Provider Audit module Comparison Instance of a comparison PlagiarismAudit ( BaseAudit ) Base Audit for Plagiarism providers class __init__ ( self , documents , total_documents , total_documents_accepted , total_documents_rejected , alerts = None , warnings = None , comparisons = None ) special Create a plagiarism audit Parameters: Name Type Description Default total_documents int Total documents required total_documents_accepted int Total documents accepted required total_documents_rejected int Total documents rejected required documents list List of documents required alerts list List of alerts None warnings list List of warnings None comparisons list List of comparison None Source code in tesla_ce_provider/provider/audit/tp.py def __init__ ( self , documents , total_documents , total_documents_accepted , total_documents_rejected , alerts = None , warnings = None , comparisons = None ): \"\"\" Create a plagiarism audit :param total_documents: Total documents :type total_documents: int :param total_documents_accepted: Total documents accepted :type total_documents_accepted: int :param total_documents_rejected: Total documents rejected :type total_documents_rejected: int :param documents: List of documents :type documents: list :param alerts: List of alerts :type alerts: list :param warnings: List of warnings :type warnings: list :param comparisons: List of comparison :type comparisons: list \"\"\" super () . __init__ ( alerts , warnings ) self . comparisons = [] self . documents = documents self . total_documents = total_documents self . total_documents_accepted = total_documents_accepted self . total_documents_rejected = total_documents_rejected if comparisons is not None : self . comparisons += comparisons add_comparison ( self , comparison_id , result , extra_info = None ) Add a new comparison to the results Parameters: Name Type Description Default comparison_id int Identification of comparison required result float Result of similitude required extra_info dict Extra information None Source code in tesla_ce_provider/provider/audit/tp.py def add_comparison ( self , comparison_id , result , extra_info = None ): \"\"\" Add a new comparison to the results :param comparison_id: Identification of comparison :type comparison_id: int :param result: Result of similitude :type result: float :param extra_info: Extra information :type extra_info: dict \"\"\" if extra_info is None : extra_info = {} c = Comparison () c . comparison_id = comparison_id c . result = result c . extra_info = extra_info self . comparisons . append ( c ) base TeSLA CE Base Provider module BaseProvider Base class for TeSLA CE Instrument providers credentials property readonly Access to the provider credentials Returns: Type Description Provider credentials delayed_results property readonly Access to the list of delayed_results Returns: Type Description list List of delayed_results notifications property readonly Access to the list of notifications Returns: Type Description list List of notifications enrol ( self , samples , model = None ) Update the model with a new enrolment sample Parameters: Name Type Description Default samples list Enrolment samples required model dict Current model None Returns: Type Description tesla_ce_provider.result.EnrolmentResult Enrolment result Source code in tesla_ce_provider/provider/base.py def enrol ( self , samples , model = None ): \"\"\" Update the model with a new enrolment sample :param samples: Enrolment samples :type samples: list :param model: Current model :type model: dict :return: Enrolment result :rtype: tesla_ce_provider.result.EnrolmentResult \"\"\" raise NotImplementedError ( 'Method not implemented on provider' ) get_provider ( provider = None ) staticmethod Create an instance of the provider Parameters: Name Type Description Default provider str Full class name for the provider None Returns: Type Description BaseProvider Provider instance Source code in tesla_ce_provider/provider/base.py @staticmethod def get_provider ( provider = None ): \"\"\" Create an instance of the provider :param provider: Full class name for the provider :type provider: str :return: Provider instance :rtype: BaseProvider \"\"\" # Get the provider class if provider is None : provider = os . getenv ( 'PROVIDER_CLASS' , None ) if provider is None : raise ModuleNotFoundError ( 'Provider implementation class is not provider. Set PROVIDER_CLASS.' ) components = provider . split ( '.' ) mod = __import__ ( components [ 0 ]) for comp in components [ 1 :]: mod = getattr ( mod , comp ) return mod () get_required_credentials () classmethod Get the credentials required by the provider Returns: Type Description List of credential names (environment variables or secrets) Source code in tesla_ce_provider/provider/base.py @classmethod def get_required_credentials ( cls ): \"\"\" Get the credentials required by the provider :return: List of credential names (environment variables or secrets) \"\"\" return cls . _required_credentials log_trace ( self , message ) Add a trace message for task. Only works if logger has been initialized using set_logger. Parameters: Name Type Description Default message Message to add to trace required Source code in tesla_ce_provider/provider/base.py def log_trace ( self , message ): \"\"\" Add a trace message for task. Only works if logger has been initialized using set_logger. :param message: Message to add to trace \"\"\" if self . _logger is not None : self . _logger ( message ) on_notification ( self , key , info ) Respond to a notification task Parameters: Name Type Description Default key str The notification task unique key required info dict Information stored in the notification required Source code in tesla_ce_provider/provider/base.py def on_notification ( self , key , info ): \"\"\" Respond to a notification task :param key: The notification task unique key :type key: str :param info: Information stored in the notification :type info: dict \"\"\" raise NotImplementedError ( 'Method not implemented on provider' ) set_credential ( self , key , value ) Set a provider credential Parameters: Name Type Description Default key Credential Key required value Credential value required Source code in tesla_ce_provider/provider/base.py def set_credential ( self , key , value ): \"\"\" Set a provider credential :param key: Credential Key :param value: Credential value \"\"\" self . _credentials [ key ] = value set_logger ( self , logger ) Set a logging function Parameters: Name Type Description Default logger Logging function that accepts a message as argument required Source code in tesla_ce_provider/provider/base.py def set_logger ( self , logger ): \"\"\" Set a logging function :param logger: Logging function that accepts a message as argument \"\"\" self . _logger = logger set_options ( self , options ) Set options for the provider Parameters: Name Type Description Default options dict Provider options following provider options_scheme definition required Source code in tesla_ce_provider/provider/base.py def set_options ( self , options ): \"\"\" Set options for the provider :param options: Provider options following provider options_scheme definition :type options: dict \"\"\" pass update_delayed_result ( self , result ) Schedule a delayed result Parameters: Name Type Description Default result Result required Source code in tesla_ce_provider/provider/base.py def update_delayed_result ( self , result ): \"\"\" Schedule a delayed result :param result: Result :type: tesla_ce_provider.result.DelayedResult \"\"\" self . _delayed_results . append ( result ) update_or_create_notification ( self , notification ) Schedule a notification task Parameters: Name Type Description Default notification Notification object required Source code in tesla_ce_provider/provider/base.py def update_or_create_notification ( self , notification ): \"\"\" Schedule a notification task :param notification: Notification object :type: tesla_ce_provider.result.NotificationTask \"\"\" # Add notification to the list of notifications self . _notifications . append ( notification ) validate_sample ( self , sample , validation_id ) Validate an enrolment sample Parameters: Name Type Description Default sample tesla_ce_provider.models.base.Sample Enrolment sample required validation_id int Validation identification required Returns: Type Description tesla_ce_provider.result.ValidationResult Validation result Source code in tesla_ce_provider/provider/base.py def validate_sample ( self , sample , validation_id ): \"\"\" Validate an enrolment sample :param sample: Enrolment sample :type sample: tesla_ce_provider.models.base.Sample :param validation_id: Validation identification :type validation_id: int :return: Validation result :rtype: tesla_ce_provider.result.ValidationResult \"\"\" raise NotImplementedError ( 'Method not implemented on provider' ) verify ( self , request , model ) Verify a learner request Parameters: Name Type Description Default request dict Verification request required model dict Provider model required Returns: Type Description tesla_ce_provider.result.VerificationResult Verification result Source code in tesla_ce_provider/provider/base.py def verify ( self , request , model ): \"\"\" Verify a learner request :param request: Verification request :type request: dict :param model: Provider model :type model: dict :return: Verification result :rtype: tesla_ce_provider.result.VerificationResult \"\"\" raise NotImplementedError ( 'Method not implemented on provider' ) result TeSLA CE Provider Result module EnrolmentDelayedResult EnrolmentDelayedResult class __init__ ( self , learner_id , sample_id , result , task_id , model , info = None ) special Create a delayed result Parameters: Name Type Description Default learner_id str Unique learner identification required sample_id int Unique sample identification required result EnrolmentResult Delayed result required task_id int Task identification required model object Model required info object An extra information about result None Source code in tesla_ce_provider/provider/result.py def __init__ ( self , learner_id , sample_id , result , task_id , model , info = None ): \"\"\" Create a delayed result :param learner_id: Unique learner identification :type learner_id: str :param sample_id: Unique sample identification :type sample_id: int :param result: Delayed result :type result: EnrolmentResult :param task_id: Task identification :type task_id: int :param model: Model :type model: object :param info: An extra information about result :type info: object \"\"\" self . result = result self . status = StatusCode . WAITING_EXTERNAL_SERVICE self . info = info self . learner_id = learner_id self . sample_id = sample_id self . task_id = task_id self . model = model EnrolmentResult Enrolment Result class __init__ ( self , model , percentage , can_analyse , valid = True , error_message = None , used_samples = None ) special Create an enrolment result instance for an enrolment sample Parameters: Name Type Description Default model dict Updated model object required can_analyse bool Whether with current model we can start analysing learner data, or we need more samples required valid bool Whether this sample is valid (True) or not (False) True error_message str An error message in case of invalid sample None used_samples list List of sample IDs used to create this model None Source code in tesla_ce_provider/provider/result.py def __init__ ( self , model , percentage , can_analyse , valid = True , error_message = None , used_samples = None ): \"\"\" Create an enrolment result instance for an enrolment sample :param model: Updated model object :type model: dict :param can_analyse: Whether with current model we can start analysing learner data, or we need more samples :type can_analyse: bool :param valid: Whether this sample is valid (True) or not (False) :type valid: bool :param error_message: An error message in case of invalid sample :type error_message: str :param used_samples: List of sample IDs used to create this model :type used_samples: list \"\"\" self . valid = valid self . error_message = error_message self . model = model self . can_analyse = can_analyse self . percentage = percentage self . used_samples = used_samples or [] NotificationTask Notification task class __init__ ( self , key , countdown = None , when = None , info = None ) special Create a notification task Parameters: Name Type Description Default key str Unique key for the notification required countdown int Minimum delay in seconds for the notification None when datetime Minimum date and time in UTC for the notification None info dict Additional data for this task None Source code in tesla_ce_provider/provider/result.py def __init__ ( self , key , countdown = None , when = None , info = None ): \"\"\" Create a notification task :param key: Unique key for the notification :type key: str :param countdown: Minimum delay in seconds for the notification :type countdown: int :param when: Minimum date and time in UTC for the notification :type when: datetime :param info: Additional data for this task :type info: dict \"\"\" if when is None and countdown is None : countdown = 60 if when is None : when = datetime . datetime . utcnow () + datetime . timedelta ( seconds = countdown ) self . key = key self . when = when self . info = info ValidationDelayedResult ValidationDelayedResult class __init__ ( self , learner_id , sample_id , validation_id , result , info = None ) special Create a delayed result Parameters: Name Type Description Default learner_id str Unique learner identification required sample_id int Unique sample identification required validation_id int Unique validation identification required result EnrolmentResult Delayed result required info object An extra information about result None Source code in tesla_ce_provider/provider/result.py def __init__ ( self , learner_id , sample_id , validation_id , result , info = None ): \"\"\" Create a delayed result :param learner_id: Unique learner identification :type learner_id: str :param sample_id: Unique sample identification :type sample_id: int :param validation_id: Unique validation identification :type validation_id: int :param result: Delayed result :type result: EnrolmentResult :param info: An extra information about result :type info: object \"\"\" self . result = result self . status = StatusCode . WAITING_EXTERNAL_SERVICE self . info = info self . learner_id = learner_id self . sample_id = sample_id self . validation_id = validation_id ValidationResult Validation Result class __init__ ( self , valid , error_message = None , info = None , contribution = None , message_code_id = None ) special Create a validation result instance for an enrolment sample Parameters: Name Type Description Default valid bool Whether this sample is valid (True) or not (False) required error_message str An error message in case of invalid sample None info dict Additional information regarding the sample verification None message_code_id str Message code None Source code in tesla_ce_provider/provider/result.py def __init__ ( self , valid , error_message = None , info = None , contribution = None , message_code_id = None ): \"\"\" Create a validation result instance for an enrolment sample :param valid: Whether this sample is valid (True) or not (False) :type valid: bool :param error_message: An error message in case of invalid sample :type error_message: str :param info: Additional information regarding the sample verification :type info: dict :param message_code_id: Message code :type message_code_id: str \"\"\" if valid is True : self . status = StatusCode . PROCESSED else : self . status = StatusCode . ERROR self . error_message = error_message self . message_code_id = message_code_id self . info = info self . contribution = contribution VerificationDelayedResult VerificationDelayedResult class __init__ ( self , learner_id , request_id , result , info = None ) special Create a delayed result Parameters: Name Type Description Default request_id int Unique request identification required result VerificationResult Delayed result required info object An extra information about result None Source code in tesla_ce_provider/provider/result.py def __init__ ( self , learner_id , request_id , result , info = None ): \"\"\" Create a delayed result :param request_id: Unique request identification :type request_id: int :param result: Delayed result :type result: VerificationResult :param info: An extra information about result :type info: object \"\"\" self . result = result self . status = StatusCode . WAITING_EXTERNAL_SERVICE self . info = info self . request_id = request_id VerificationResult Verification Result class __init__ ( self , valid , code = 1 , error_message = None , audit = None , result = None , message_code = None ) special Create a verification result instance for a verification request Parameters: Name Type Description Default valid bool Whether this request is valid (True) or not (False) required code AlertCode Alert level code for this request 1 error_message str An error message in case of invalid request None audit BaseAudit Additional information regarding the request verification None result float The numeric result from 0 to 1 for this sample None message_code Message Message related to this result None Source code in tesla_ce_provider/provider/result.py def __init__ ( self , valid , code = AlertCode . OK , error_message = None , audit = None , result = None , message_code = None ): \"\"\" Create a verification result instance for a verification request :param valid: Whether this request is valid (True) or not (False) :type valid: bool :param code: Alert level code for this request :type code: AlertCode :param error_message: An error message in case of invalid request :type error_message: str :param audit: Additional information regarding the request verification :type audit: BaseAudit :param result: The numeric result from 0 to 1 for this sample :type result: float :param message_code: Message related to this result :type message_code: Message \"\"\" if valid : self . status = StatusCode . PROCESSED else : self . status = StatusCode . ERROR self . error_message = error_message self . message_code = message_code self . audit = None if audit is not None : self . audit = audit . json () self . result = result self . code = code tasks special TeSLA CE Provider tasks package base TeSLA CE Base Task module BaseTask ( Task ) Base Task for TeSLA Providers client property readonly Access to the TeSLA CE Client instance Returns: Type Description tesla_ce_client.Client Client instance provider property readonly Access to the provider implementation Returns: Type Description BaseProvider Provider instance add_trace ( message ) staticmethod Add task trace for current task. This trace is shown on logs at info state Parameters: Name Type Description Default message Message to be shown required Source code in tesla_ce_provider/tasks/base.py @staticmethod def add_trace ( message ): \"\"\" Add task trace for current task. This trace is shown on logs at info state :param message: Message to be shown \"\"\" if os . getenv ( 'LOG_TASK_TRACE' , False ) in [ '1' , 'True' , 'true' , 1 , True ]: task_logger . info ( message ) capture_exception ( exception ) staticmethod Capture exception and send it to Sentry if it is enabled Parameters: Name Type Description Default exception Captured exception required Source code in tesla_ce_provider/tasks/base.py @staticmethod def capture_exception ( exception ): \"\"\" Capture exception and send it to Sentry if it is enabled :param exception: Captured exception \"\"\" if os . getenv ( 'SENTRY_ENABLED' ) in [ '1' , 1 , 'True' , 'yes' , 'true' ] and os . getenv ( 'SENTRY_DSN' ) is not None : capture_exception ( exception ) delete_notification ( self , notification_id ) Delete a notification task Parameters: Name Type Description Default notification_id int Notification unique id required Source code in tesla_ce_provider/tasks/base.py def delete_notification ( self , notification_id ): \"\"\" Delete a notification task :param notification_id: Notification unique id :type notification_id: int \"\"\" return self . client . provider . notification . delete ( self . get_provider_id (), notification_id ) get_model_data ( self , url ) Download model data from storage url Parameters: Name Type Description Default url str Storage URL required Returns: Type Description dict Model data Source code in tesla_ce_provider/tasks/base.py def get_model_data ( self , url ): \"\"\" Download model data from storage url :param url: Storage URL :type url: str :return: Model data :rtype: dict \"\"\" if os . getenv ( 'SSL_VERIFY' , True ) in [ 'False' , 'false' , 0 , False , '0' ]: data_resp = requests . get ( url , verify = False ) else : data_resp = requests . get ( url ) if data_resp . status_code != 200 : self . retry ( countdown = 5 * 60 , max_retries = 3 ) return data_resp . json () get_notification_data ( self , notification_id ) Get information for a given notification Parameters: Name Type Description Default notification_id int Notification unique id required Returns: Type Description dict Notification object Source code in tesla_ce_provider/tasks/base.py def get_notification_data ( self , notification_id ): \"\"\" Get information for a given notification :param notification_id: Notification unique id :type notification_id: int :return: Notification object :rtype: dict \"\"\" return self . client . provider . notification . get ( self . get_provider_id (), notification_id ) get_provider_id ( self ) Get the Provider ID Returns: Type Description int Provider ID Source code in tesla_ce_provider/tasks/base.py def get_provider_id ( self ): \"\"\" Get the Provider ID :return: Provider ID :rtype: int \"\"\" return self . _client . _connector . get_provider_id () get_provider_info ( self ) Get the Provider information Returns: Type Description dict Provider information Source code in tesla_ce_provider/tasks/base.py def get_provider_info ( self ): \"\"\" Get the Provider information :return: Provider information :rtype: dict \"\"\" return self . _client . provider . get ( self . get_provider_id ()) get_provider_options ( self ) Get the Provider options Returns: Type Description dict Provider options Source code in tesla_ce_provider/tasks/base.py def get_provider_options ( self ): \"\"\" Get the Provider options :return: Provider options :rtype: dict \"\"\" provider_info = self . _client . provider . get ( self . get_provider_id ()) if provider_info is not None and 'options' in provider_info : return provider_info [ 'options' ] return None get_request_data ( self , url ) Download request data from storage url Parameters: Name Type Description Default url str Storage URL required Returns: Type Description dict Request data Source code in tesla_ce_provider/tasks/base.py def get_request_data ( self , url ): \"\"\" Download request data from storage url :param url: Storage URL :type url: str :return: Request data :rtype: dict \"\"\" return self . get_sample_data ( url ) get_sample_data ( self , url ) Download sample data from storage url Parameters: Name Type Description Default url str Storage URL required Returns: Type Description dict Sample data Source code in tesla_ce_provider/tasks/base.py def get_sample_data ( self , url ): \"\"\" Download sample data from storage url :param url: Storage URL :type url: str :return: Sample data :rtype: dict \"\"\" if os . getenv ( 'SSL_VERIFY' , True ) in [ 'False' , 'false' , 0 , False , '0' ]: data_resp = requests . get ( url , verify = False ) else : data_resp = requests . get ( url ) if data_resp . status_code != 200 : self . retry ( countdown = 5 * 60 , max_retries = 3 ) return data_resp . json () get_sample_validations ( self , sample ) Get sample available validations Parameters: Name Type Description Default sample dict A sample object required Returns: Type Description Validation generator Source code in tesla_ce_provider/tasks/base.py def get_sample_validations ( self , sample ): \"\"\" Get sample available validations :param sample: A sample object :type sample: dict :return: Validation generator \"\"\" validations = self . client . provider . enrolment . get_sample_validation_list ( self . get_provider_id (), sample [ 'learner_id' ], sample [ 'id' ]) for validation in validations [ 'results' ]: if 'info' in validation and validation [ 'info' ] is not None : data = self . get_sample_data ( validation [ 'info' ]) validation [ 'info' ] = data validation_data = parse_validation_data ( data ) if validation_data is not None : yield validation_data get_validated_enrolment_samples ( self , learner_id ) Return the list of enrolment samples that are available for this learner. Only returns those samples that are not included in current model. Parameters: Name Type Description Default learner_id str The learner UUID required Returns: Type Description list Enrolment samples Source code in tesla_ce_provider/tasks/base.py def get_validated_enrolment_samples ( self , learner_id ): \"\"\" Return the list of enrolment samples that are available for this learner. Only returns those samples that are not included in current model. :param learner_id: The learner UUID :type learner_id: str :return: Enrolment samples :rtype: list \"\"\" result = self . _client . provider . enrolment . get_available_samples ( self . get_provider_id (), learner_id ) if result is None or result [ 'count' ] == 0 : return None while result is not None : page = [] # Read data for each sample for sample in result [ 'results' ]: # Get the validations sample [ 'validations' ] = self . get_sample_validations ( sample ) # Get the data sample_data = self . get_sample_data ( sample [ 'data' ]) sample [ 'data' ] = sample_data page . append ( sample ) for sample in page : yield Sample ( sample ) # Move to next page result = self . _client . get_next ( result ) on_failure ( self , exc , task_id , args , kwargs , einfo ) Perform default actions when an uncontrolled exception is raised Parameters: Name Type Description Default exc Exception The exception raised by the task. required task_id uuid The task identifier required args tuple Original arguments for the task that failed. required kwargs dict Original keyword arguments for the task that failed. required einfo required Source code in tesla_ce_provider/tasks/base.py def on_failure ( self , exc , task_id , args , kwargs , einfo ): \"\"\" Perform default actions when an uncontrolled exception is raised :param exc: The exception raised by the task. :type exc: Exception :param task_id: The task identifier :type task_id: uuid :param args: Original arguments for the task that failed. :type args: tuple :param kwargs: Original keyword arguments for the task that failed. :type kwargs: dict :param einfo: \"\"\" self . capture_exception ( exc ) if self . _unlock_on_failure and self . _learner is not None : self . client . provider . enrolment . unlock_model ( self . get_provider_id (), self . _learner , self . request . id ) send_delayed_results ( self ) Send notification tasks Source code in tesla_ce_provider/tasks/base.py def send_delayed_results ( self ): \"\"\" Send notification tasks \"\"\" for delayed_result in self . provider . delayed_results : if isinstance ( delayed_result , ValidationDelayedResult ): self . client . provider . enrolment . set_sample_validation ( self . get_provider_id (), delayed_result . learner_id , delayed_result . sample_id , delayed_result . validation_id , delayed_result . result . json () ) if isinstance ( delayed_result , EnrolmentDelayedResult ): model = delayed_result . model if delayed_result . result . valid : model [ 'model' ] = delayed_result . result . model model [ 'percentage' ] = delayed_result . result . percentage model [ 'can_analyse' ] = delayed_result . result . can_analyse model [ 'used_samples' ] = delayed_result . result . used_samples # Store new model self . add_trace ( 'EnrolmentTask: Saving new model' ) self . client . provider . enrolment . save_model ( self . get_provider_id (), delayed_result . learner_id , self . request . id , model ) if isinstance ( delayed_result , VerificationDelayedResult ): self . client . provider . verification . set_provider_request_result ( provider_id = self . get_provider_id (), request_id = delayed_result . request_id , result = delayed_result . result . json ()) self . provider . delayed_results . clear () send_notifications ( self ) Send notification tasks Source code in tesla_ce_provider/tasks/base.py def send_notifications ( self ): \"\"\" Send notification tasks \"\"\" for notification in self . provider . notifications : self . client . provider . notification . update_or_create ( self . get_provider_id (), notification . key , notification . when , notification . info ) self . provider . notifications . clear () enrolment TeSLA CE Enrolment related tasks module notification TeSLA CE Notification tasks module verification TeSLA CE Verification tasks module","title":"Client"},{"location":"client/#provider","text":"TeSLA CE Provider Package","title":"Provider"},{"location":"client/#tesla_ce_provider.celery_app","text":"Celery client module","title":"celery_app"},{"location":"client/#tesla_ce_provider.message","text":"TeSLA CE Messages package","title":"message"},{"location":"client/#tesla_ce_provider.message.integrity","text":"TeSLA CE Integrity Messages module","title":"integrity"},{"location":"client/#tesla_ce_provider.message.integrity.Integrity","text":"Message codes related to Integrity","title":"Integrity"},{"location":"client/#tesla_ce_provider.message.provider","text":"TeSLA CE Provider Messages module","title":"provider"},{"location":"client/#tesla_ce_provider.message.provider.Provider","text":"Message codes related to Providers","title":"Provider"},{"location":"client/#tesla_ce_provider.message.sensor","text":"TeSLA CE Sensor Messages module","title":"sensor"},{"location":"client/#tesla_ce_provider.message.sensor.Sensor","text":"Message codes related to Sensors","title":"Sensor"},{"location":"client/#tesla_ce_provider.message.status","text":"TeSLA CE Status Messages module","title":"status"},{"location":"client/#tesla_ce_provider.message.status.Status","text":"Message codes related to Status","title":"Status"},{"location":"client/#tesla_ce_provider.models","text":"TeSLA CE Base Provider models package","title":"models"},{"location":"client/#tesla_ce_provider.models.base","text":"TeSLA CE Base Provider base model module","title":"base"},{"location":"client/#tesla_ce_provider.models.base.Request","text":"Request object class for providers","title":"Request"},{"location":"client/#tesla_ce_provider.models.base.Request.activity_id","text":"Get Activity ID Returns: Type Description int Activity unique identifier in the API","title":"activity_id"},{"location":"client/#tesla_ce_provider.models.base.Request.context","text":"Get the context provided by the sensors Returns: Type Description dict Context information for the request","title":"context"},{"location":"client/#tesla_ce_provider.models.base.Request.course_id","text":"Get Course ID Returns: Type Description int Course unique identifier in the API","title":"course_id"},{"location":"client/#tesla_ce_provider.models.base.Request.data","text":"Get request data Returns: Type Description str The base64 codification of the sample as provided by sensors","title":"data"},{"location":"client/#tesla_ce_provider.models.base.Request.instruments","text":"Get the list of instruments selected for this request Returns: Type Description list List of instrument id's","title":"instruments"},{"location":"client/#tesla_ce_provider.models.base.Request.learner_id","text":"Get Learner ID Returns: Type Description str UUIDv4 id of the learner owning this request","title":"learner_id"},{"location":"client/#tesla_ce_provider.models.base.Request.metadata","text":"Get the metadata provided by the sensors Returns: Type Description dict Metadata information for the request","title":"metadata"},{"location":"client/#tesla_ce_provider.models.base.Request.mime_type","text":"Get the mime type of the request Returns: Type Description str Request mime type","title":"mime_type"},{"location":"client/#tesla_ce_provider.models.base.Request.request_id","text":"Get Request ID Returns: Type Description int Request unique identifier in the API","title":"request_id"},{"location":"client/#tesla_ce_provider.models.base.Request.session_id","text":"Get Session ID Returns: Type Description int Session unique identifier in the API","title":"session_id"},{"location":"client/#tesla_ce_provider.models.base.Request.__init__","text":"Base constructor, that creates the object from JSON description Parameters: Name Type Description Default object dict JSON dictionary of a request required Source code in tesla_ce_provider/models/base.py def __init__ ( self , object ): \"\"\" Base constructor, that creates the object from JSON description :param object: JSON dictionary of a request :type object: dict \"\"\" if 'request' in object : self . _object = object [ 'request' ] else : self . _object = object","title":"__init__()"},{"location":"client/#tesla_ce_provider.models.base.Sample","text":"Sample object class for providers","title":"Sample"},{"location":"client/#tesla_ce_provider.models.base.Sample.context","text":"Get the context provided by the sensors Returns: Type Description dict Context information for the sample","title":"context"},{"location":"client/#tesla_ce_provider.models.base.Sample.data","text":"Get sample data Returns: Type Description str The base64 codification of the sample as provided by sensors","title":"data"},{"location":"client/#tesla_ce_provider.models.base.Sample.instruments","text":"Get the list of instruments selected for this sample Returns: Type Description list List of instrument id's","title":"instruments"},{"location":"client/#tesla_ce_provider.models.base.Sample.learner_id","text":"Get Learner ID Returns: Type Description str UUIDv4 id of the learner owning this sample","title":"learner_id"},{"location":"client/#tesla_ce_provider.models.base.Sample.metadata","text":"Get the metadata provided by the sensors Returns: Type Description dict Metadata information for the sample","title":"metadata"},{"location":"client/#tesla_ce_provider.models.base.Sample.mime_type","text":"Get the mime type of the request Returns: Type Description str Request mime type","title":"mime_type"},{"location":"client/#tesla_ce_provider.models.base.Sample.sample_id","text":"Get Sample ID Returns: Type Description int Sample unique identifier in the API","title":"sample_id"},{"location":"client/#tesla_ce_provider.models.base.Sample.validations","text":"Get available validations for this sample Returns: Type Description Union[generat,] A generator providing all available validations","title":"validations"},{"location":"client/#tesla_ce_provider.models.base.Sample.__init__","text":"Base constructor, that creates the object from JSON description Parameters: Name Type Description Default object dict JSON dictionary of a sample required Source code in tesla_ce_provider/models/base.py def __init__ ( self , object ): \"\"\" Base constructor, that creates the object from JSON description :param object: JSON dictionary of a sample :type object: dict \"\"\" if 'sample' in object : self . _object = object [ 'sample' ] else : self . _object = object","title":"__init__()"},{"location":"client/#tesla_ce_provider.models.base.ValidationData","text":"Validation class for providers","title":"ValidationData"},{"location":"client/#tesla_ce_provider.models.base.ValidationData.__init__","text":"Default constructor Source code in tesla_ce_provider/models/base.py def __init__ ( self , data_object = None ): \"\"\" Default constructor \"\"\" #: Instrument self . instrument = None #: Additional information self . info = None #: Provider information self . provider = None if data_object is not None : self . load ( data_object )","title":"__init__()"},{"location":"client/#tesla_ce_provider.models.base.ValidationData.load","text":"Load an object from a JSON representation Parameters: Name Type Description Default object dict JSON representation of the object required Returns: Type Description bool Whether this object is a valid representation or not Source code in tesla_ce_provider/models/base.py def load ( self , object ): \"\"\" Load an object from a JSON representation :param object: JSON representation of the object :type object: dict :return: Whether this object is a valid representation or not :rtype: bool \"\"\" if 'provider' in object and 'instrument' in object and 'info' in object : self . provider = object [ 'provider' ] self . instrument = object [ 'instrument' ] self . info = object [ 'info' ] return True return False","title":"load()"},{"location":"client/#tesla_ce_provider.models.base.ValidationData.set_info","text":"Set additional information specific for the provider Parameters: Name Type Description Default info dict Additional information required Source code in tesla_ce_provider/models/base.py def set_info ( self , info ): \"\"\" Set additional information specific for the provider :param info: Additional information :type info: dict \"\"\" self . info = info","title":"set_info()"},{"location":"client/#tesla_ce_provider.models.base.ValidationData.set_instrument","text":"Set the information for the instrument Parameters: Name Type Description Default id int Id of the instrument required acronym str Acronym of the instrument required Source code in tesla_ce_provider/models/base.py def set_instrument ( self , id , acronym ): \"\"\" Set the information for the instrument :param id: Id of the instrument :type id: int :param acronym: Acronym of the instrument :type acronym: str \"\"\" self . instrument = { 'id' : id , 'acronym' : acronym }","title":"set_instrument()"},{"location":"client/#tesla_ce_provider.models.base.ValidationData.set_provider","text":"Set the information for the provider that performed the validation Parameters: Name Type Description Default id int Id of the provider required acronym str Acronym of the provider required version str Version of the provider implementation required Source code in tesla_ce_provider/models/base.py def set_provider ( self , id , acronym , version ): \"\"\" Set the information for the provider that performed the validation :param id: Id of the provider :type id: int :param acronym: Acronym of the provider :type acronym: str :param version: Version of the provider implementation :type version: str \"\"\" self . provider = { 'id' : id , 'acronym' : acronym , 'version' : version }","title":"set_provider()"},{"location":"client/#tesla_ce_provider.models.base.ValidationData.to_json","text":"Get a JSON representation of the object Returns: Type Description dict JSON representation Source code in tesla_ce_provider/models/base.py def to_json ( self ): \"\"\" Get a JSON representation of the object :return: JSON representation :rtype: dict \"\"\" return { 'provider' : self . provider , 'instrument' : self . instrument , 'info' : self . info }","title":"to_json()"},{"location":"client/#tesla_ce_provider.models.fr","text":"TeSLA CE Base Provider Face Recognition models module","title":"fr"},{"location":"client/#tesla_ce_provider.models.fr.FRValidationData","text":"Validation class for Face Recognition providers","title":"FRValidationData"},{"location":"client/#tesla_ce_provider.models.fr.FRValidationData.load","text":"Load an object from a JSON representation Parameters: Name Type Description Default object dict JSON representation of the object required Returns: Type Description bool Whether this object is a valid representation or not Source code in tesla_ce_provider/models/fr.py def load ( self , object ): \"\"\" Load an object from a JSON representation :param object: JSON representation of the object :type object: dict :return: Whether this object is a valid representation or not :rtype: bool \"\"\" if super () . load ( object ) and 'face_location' in object and 'pose' in object : self . face_location = object [ 'face_location' ] self . pose = object [ 'pose' ] return True return False","title":"load()"},{"location":"client/#tesla_ce_provider.models.fr.FRValidationData.set_location","text":"Set the face coordinates in image Parameters: Name Type Description Default left float Left coordinate required top float Top coordinate required height float Height of the face region required width float Width of the face region required Source code in tesla_ce_provider/models/fr.py def set_location ( self , left , top , height , width ): \"\"\" Set the face coordinates in image :param left: Left coordinate :type left: float :param top: Top coordinate :type top: float :param height: Height of the face region :type height: float :param width: Width of the face region :type width: float \"\"\" self . face_location = { 'left' : left , 'top' : top , 'height' : height , 'width' : width }","title":"set_location()"},{"location":"client/#tesla_ce_provider.models.fr.FRValidationData.set_pose","text":"Set head pose estimation Parameters: Name Type Description Default roll float Roll value required yaw float Yaw value required pitch float Pith value required Source code in tesla_ce_provider/models/fr.py def set_pose ( self , roll , yaw , pitch ): \"\"\" Set head pose estimation :param roll: Roll value :type roll: float :param yaw: Yaw value :type yaw: float :param pitch: Pith value :type pitch: float \"\"\" self . pose = { 'roll' : roll , 'yaw' : yaw , 'pitch' : pitch }","title":"set_pose()"},{"location":"client/#tesla_ce_provider.models.fr.FRValidationData.to_json","text":"Get a JSON representation of the object Returns: Type Description dict JSON representation Source code in tesla_ce_provider/models/fr.py def to_json ( self ): \"\"\" Get a JSON representation of the object :return: JSON representation :rtype: dict \"\"\" base_json = super () . to_json () base_json . update ( { 'face_location' : self . face_location , 'pose' : self . pose } ) return base_json","title":"to_json()"},{"location":"client/#tesla_ce_provider.models.model","text":"TeSLA CE Base Provider base model module","title":"model"},{"location":"client/#tesla_ce_provider.models.model.BaseModel","text":"Model class for providers","title":"BaseModel"},{"location":"client/#tesla_ce_provider.models.model.BaseModel.__init__","text":"Default constructor Source code in tesla_ce_provider/models/model.py def __init__ ( self , model_object = None ): \"\"\" Default constructor \"\"\" #: Current enrolment percentage self . _percentage = 0.0 #: List of samples included in this model self . _samples = [] #: Model data self . _data = None if model_object is not None : self . load ( model_object )","title":"__init__()"},{"location":"client/#tesla_ce_provider.models.model.BaseModel.add_sample","text":"Add given sample to model Parameters: Name Type Description Default sample tesla_ce_provider.models.base.Sample Sample object required features dict Optional provider representation for this sample None Source code in tesla_ce_provider/models/model.py def add_sample ( self , sample , features = None ): \"\"\" Add given sample to model :param sample: Sample object :type sample: tesla_ce_provider.models.base.Sample :param features: Optional provider representation for this sample :type features: dict \"\"\" self . _samples . append ({ 'id' : sample . sample_id , 'features' : features })","title":"add_sample()"},{"location":"client/#tesla_ce_provider.models.model.BaseModel.can_analyse","text":"Check if current model is able to be used or need more enrolment samples Returns: Type Description bool True if this model can be used or False otherwise Source code in tesla_ce_provider/models/model.py def can_analyse ( self ): \"\"\" Check if current model is able to be used or need more enrolment samples :return: True if this model can be used or False otherwise :rtype: bool \"\"\" raise NotImplementedError ( 'Method not implemented' )","title":"can_analyse()"},{"location":"client/#tesla_ce_provider.models.model.BaseModel.get_percentage","text":"Get the enrolment percentage Returns: Type Description float Enrolment percentage Source code in tesla_ce_provider/models/model.py def get_percentage ( self ): \"\"\" Get the enrolment percentage :return: Enrolment percentage :rtype: float \"\"\" return self . _percentage","title":"get_percentage()"},{"location":"client/#tesla_ce_provider.models.model.BaseModel.get_sample_id","text":"Return the sample ID from the index in the list of samples in the model Parameters: Name Type Description Default idx int Index in the list of samples required Returns: Type Description int Enrolment sample ID Source code in tesla_ce_provider/models/model.py def get_sample_id ( self , idx ): \"\"\" Return the sample ID from the index in the list of samples in the model :param idx: Index in the list of samples :type idx: int :return: Enrolment sample ID :rtype: int \"\"\" if idx < 0 or idx > len ( self . _samples ) - 1 : return None return list ( self . _samples )[ idx ][ 'id' ]","title":"get_sample_id()"},{"location":"client/#tesla_ce_provider.models.model.BaseModel.get_samples","text":"Get samples stored in the model Returns: Type Description Sample generator Source code in tesla_ce_provider/models/model.py def get_samples ( self ): \"\"\" Get samples stored in the model :return: Sample generator \"\"\" for sample in self . _samples : yield sample","title":"get_samples()"},{"location":"client/#tesla_ce_provider.models.model.BaseModel.get_used_samples","text":"Return a list of the sample IDs used by this model Returns: Type Description list List of sample ID's Source code in tesla_ce_provider/models/model.py def get_used_samples ( self ): \"\"\" Return a list of the sample IDs used by this model :return: List of sample ID's :rtype: list \"\"\" used_samples = [] for sample in self . _samples : used_samples . append ( sample [ 'id' ]) return used_samples","title":"get_used_samples()"},{"location":"client/#tesla_ce_provider.models.model.BaseModel.load","text":"Load an object from a JSON representation Parameters: Name Type Description Default model_object dict JSON representation of the object required Returns: Type Description bool Whether this object is a valid representation or not Source code in tesla_ce_provider/models/model.py def load ( self , model_object ): \"\"\" Load an object from a JSON representation :param model_object: JSON representation of the object :type model_object: dict :return: Whether this object is a valid representation or not :rtype: bool \"\"\" if 'percentage' in model_object and 'samples' in model_object and 'data' in model_object : self . _percentage = model_object [ 'percentage' ] self . _samples = model_object [ 'samples' ] self . _data = model_object [ 'data' ] return True return False","title":"load()"},{"location":"client/#tesla_ce_provider.models.model.BaseModel.set_data","text":"Set model data Parameters: Name Type Description Default data dict Model data required Source code in tesla_ce_provider/models/model.py def set_data ( self , data ): \"\"\" Set model data :param data: Model data :type data: dict \"\"\" self . _data = data","title":"set_data()"},{"location":"client/#tesla_ce_provider.models.model.BaseModel.to_json","text":"Get a JSON representation of the object Returns: Type Description dict JSON representation Source code in tesla_ce_provider/models/model.py def to_json ( self ): \"\"\" Get a JSON representation of the object :return: JSON representation :rtype: dict \"\"\" return { 'percentage' : self . _percentage , 'samples' : self . _samples , 'data' : self . _data }","title":"to_json()"},{"location":"client/#tesla_ce_provider.models.model.SimpleModel","text":"Simple Model based on a list of reference samples","title":"SimpleModel"},{"location":"client/#tesla_ce_provider.models.model.SimpleModel.add_sample","text":"Add given sample to model and update the enrolment percentage Parameters: Name Type Description Default sample tesla_ce_provider.models.base.Sample Sample object required features dict Optional provider representation for this sample None Source code in tesla_ce_provider/models/model.py def add_sample ( self , sample , features = None ): \"\"\" Add given sample to model and update the enrolment percentage :param sample: Sample object :type sample: tesla_ce_provider.models.base.Sample :param features: Optional provider representation for this sample :type features: dict \"\"\" super () . add_sample ( sample , features ) self . _percentage = min ( 1.0 , float ( len ( self . _samples )) / float ( self . _required_samples ))","title":"add_sample()"},{"location":"client/#tesla_ce_provider.models.model.SimpleModel.can_analyse","text":"Check if current model is able to be used or need more enrolment samples Returns: Type Description bool True if this model can be used or False otherwise Source code in tesla_ce_provider/models/model.py def can_analyse ( self ): \"\"\" Check if current model is able to be used or need more enrolment samples :return: True if this model can be used or False otherwise :rtype: bool \"\"\" return len ( self . _samples ) >= self . _min_required_samples","title":"can_analyse()"},{"location":"client/#tesla_ce_provider.models.model.SimpleModel.load","text":"Load an object from a JSON representation Parameters: Name Type Description Default model_object dict JSON representation of the object required Returns: Type Description bool Whether this object is a valid representation or not Source code in tesla_ce_provider/models/model.py def load ( self , model_object ): \"\"\" Load an object from a JSON representation :param model_object: JSON representation of the object :type model_object: dict :return: Whether this object is a valid representation or not :rtype: bool \"\"\" if super () . load ( model_object ) and 'min_required_samples' in model_object and 'required_samples' in model_object : self . _min_required_samples = model_object [ 'percentage' ] self . _required_samples = model_object [ 'required_samples' ] return True return False","title":"load()"},{"location":"client/#tesla_ce_provider.models.model.SimpleModel.set_min_required_samples","text":"Set the minimum number of samples required to be able to analyse Parameters: Name Type Description Default num_samples int Number of samples required Source code in tesla_ce_provider/models/model.py def set_min_required_samples ( self , num_samples ): \"\"\" Set the minimum number of samples required to be able to analyse :param num_samples: Number of samples :type num_samples: int \"\"\" self . _min_required_samples = num_samples","title":"set_min_required_samples()"},{"location":"client/#tesla_ce_provider.models.model.SimpleModel.set_required_samples","text":"Set the number of samples required for this model Parameters: Name Type Description Default num_samples int Number of samples required Source code in tesla_ce_provider/models/model.py def set_required_samples ( self , num_samples ): \"\"\" Set the number of samples required for this model :param num_samples: Number of samples :type num_samples: int \"\"\" self . _required_samples = num_samples","title":"set_required_samples()"},{"location":"client/#tesla_ce_provider.models.parser","text":"TeSLA CE Base Provider base model module","title":"parser"},{"location":"client/#tesla_ce_provider.models.parser.parse_validation_data","text":"Load a ValidationData object from a JSON representation Parameters: Name Type Description Default object dict JSON representation of the object required Returns: Type Description FRValidationData | The specific validation object for this data or None if is an invalid JSON representation Source code in tesla_ce_provider/models/parser.py def parse_validation_data ( object ): \"\"\" Load a ValidationData object from a JSON representation :param object: JSON representation of the object :type object: dict :return: The specific validation object for this data or None if is an invalid JSON representation :rtype: FRValidationData | \"\"\" base = ValidationData () specific = None if base . load ( object ): if base . instrument [ 'acronym' ] == 'fr' : specific = FRValidationData () elif base . instrument [ 'acronym' ] == 'vr' : # TODO: Add VR validation data pass elif base . instrument [ 'acronym' ] == 'ks' : # TODO: Add KS validation data pass # Load the object with the specific data if specific is None or not specific . load ( object ): return None return specific","title":"parse_validation_data()"},{"location":"client/#tesla_ce_provider.provider","text":"TeSLA CE Base Provider package","title":"provider"},{"location":"client/#tesla_ce_provider.provider.audit","text":"TeSLA CE Audit package","title":"audit"},{"location":"client/#tesla_ce_provider.provider.audit.base","text":"TeSLA CE Provider Base Audit module","title":"base"},{"location":"client/#tesla_ce_provider.provider.audit.base.BaseAudit","text":"Base Audit class","title":"BaseAudit"},{"location":"client/#tesla_ce_provider.provider.audit.base.BaseAudit.__init__","text":"Create an audit object Parameters: Name Type Description Default alerts list List of alerts None warnings list List of warnings None Source code in tesla_ce_provider/provider/audit/base.py def __init__ ( self , alerts = None , warnings = None ): \"\"\" Create an audit object :param alerts: List of alerts :type alerts: list :param warnings: List of warnings :type warnings: list \"\"\" self . alerts = [] self . warnings = [] if alerts is not None : self . alerts += alerts if warnings is not None : self . warnings += warnings","title":"__init__()"},{"location":"client/#tesla_ce_provider.provider.audit.fr","text":"TeSLA CE Face Recognition Provider Audit module","title":"fr"},{"location":"client/#tesla_ce_provider.provider.audit.fr.DetectedFace","text":"Instance of a detected face","title":"DetectedFace"},{"location":"client/#tesla_ce_provider.provider.audit.fr.FaceRecognitionAudit","text":"Base Audit for Face Recognition providers class","title":"FaceRecognitionAudit"},{"location":"client/#tesla_ce_provider.provider.audit.fr.FaceRecognitionAudit.__init__","text":"Create a face recognition audit Parameters: Name Type Description Default alerts list List of alerts None warnings list List of warnings None faces list List of detected faces None Source code in tesla_ce_provider/provider/audit/fr.py def __init__ ( self , alerts = None , warnings = None , faces = None ): \"\"\" Create a face recognition audit :param alerts: List of alerts :type alerts: list :param warnings: List of warnings :type warnings: list :param faces: List of detected faces :type faces: list \"\"\" super () . __init__ ( alerts , warnings ) self . faces = [] if faces is not None : self . faces += faces","title":"__init__()"},{"location":"client/#tesla_ce_provider.provider.audit.fr.FaceRecognitionAudit.add_face","text":"Add a new detected face to the results Parameters: Name Type Description Default coordinates list Coordinates of the detected face required score float Score of the recognition required most_similar int ID of the most similar enrolment sample None info dict Additional information for detected face None image str Base64 encoded image for the detected face None Source code in tesla_ce_provider/provider/audit/fr.py def add_face ( self , coordinates , score , most_similar = None , info = None , image = None ): \"\"\" Add a new detected face to the results :param coordinates: Coordinates of the detected face :type coordinates: list :param score: Score of the recognition :type score: float :param most_similar: ID of the most similar enrolment sample :type most_similar: int :param info: Additional information for detected face :type info: dict :param image: Base64 encoded image for the detected face :type image: str \"\"\" new_face = DetectedFace () new_face . coordinates = coordinates new_face . score = score new_face . most_similar_sample = most_similar new_face . info = info new_face . image = image self . faces . append ( new_face )","title":"add_face()"},{"location":"client/#tesla_ce_provider.provider.audit.tp","text":"TeSLA CE Plagiarism Provider Audit module","title":"tp"},{"location":"client/#tesla_ce_provider.provider.audit.tp.Comparison","text":"Instance of a comparison","title":"Comparison"},{"location":"client/#tesla_ce_provider.provider.audit.tp.PlagiarismAudit","text":"Base Audit for Plagiarism providers class","title":"PlagiarismAudit"},{"location":"client/#tesla_ce_provider.provider.audit.tp.PlagiarismAudit.__init__","text":"Create a plagiarism audit Parameters: Name Type Description Default total_documents int Total documents required total_documents_accepted int Total documents accepted required total_documents_rejected int Total documents rejected required documents list List of documents required alerts list List of alerts None warnings list List of warnings None comparisons list List of comparison None Source code in tesla_ce_provider/provider/audit/tp.py def __init__ ( self , documents , total_documents , total_documents_accepted , total_documents_rejected , alerts = None , warnings = None , comparisons = None ): \"\"\" Create a plagiarism audit :param total_documents: Total documents :type total_documents: int :param total_documents_accepted: Total documents accepted :type total_documents_accepted: int :param total_documents_rejected: Total documents rejected :type total_documents_rejected: int :param documents: List of documents :type documents: list :param alerts: List of alerts :type alerts: list :param warnings: List of warnings :type warnings: list :param comparisons: List of comparison :type comparisons: list \"\"\" super () . __init__ ( alerts , warnings ) self . comparisons = [] self . documents = documents self . total_documents = total_documents self . total_documents_accepted = total_documents_accepted self . total_documents_rejected = total_documents_rejected if comparisons is not None : self . comparisons += comparisons","title":"__init__()"},{"location":"client/#tesla_ce_provider.provider.audit.tp.PlagiarismAudit.add_comparison","text":"Add a new comparison to the results Parameters: Name Type Description Default comparison_id int Identification of comparison required result float Result of similitude required extra_info dict Extra information None Source code in tesla_ce_provider/provider/audit/tp.py def add_comparison ( self , comparison_id , result , extra_info = None ): \"\"\" Add a new comparison to the results :param comparison_id: Identification of comparison :type comparison_id: int :param result: Result of similitude :type result: float :param extra_info: Extra information :type extra_info: dict \"\"\" if extra_info is None : extra_info = {} c = Comparison () c . comparison_id = comparison_id c . result = result c . extra_info = extra_info self . comparisons . append ( c )","title":"add_comparison()"},{"location":"client/#tesla_ce_provider.provider.base","text":"TeSLA CE Base Provider module","title":"base"},{"location":"client/#tesla_ce_provider.provider.base.BaseProvider","text":"Base class for TeSLA CE Instrument providers","title":"BaseProvider"},{"location":"client/#tesla_ce_provider.provider.base.BaseProvider.credentials","text":"Access to the provider credentials Returns: Type Description Provider credentials","title":"credentials"},{"location":"client/#tesla_ce_provider.provider.base.BaseProvider.delayed_results","text":"Access to the list of delayed_results Returns: Type Description list List of delayed_results","title":"delayed_results"},{"location":"client/#tesla_ce_provider.provider.base.BaseProvider.notifications","text":"Access to the list of notifications Returns: Type Description list List of notifications","title":"notifications"},{"location":"client/#tesla_ce_provider.provider.base.BaseProvider.enrol","text":"Update the model with a new enrolment sample Parameters: Name Type Description Default samples list Enrolment samples required model dict Current model None Returns: Type Description tesla_ce_provider.result.EnrolmentResult Enrolment result Source code in tesla_ce_provider/provider/base.py def enrol ( self , samples , model = None ): \"\"\" Update the model with a new enrolment sample :param samples: Enrolment samples :type samples: list :param model: Current model :type model: dict :return: Enrolment result :rtype: tesla_ce_provider.result.EnrolmentResult \"\"\" raise NotImplementedError ( 'Method not implemented on provider' )","title":"enrol()"},{"location":"client/#tesla_ce_provider.provider.base.BaseProvider.get_provider","text":"Create an instance of the provider Parameters: Name Type Description Default provider str Full class name for the provider None Returns: Type Description BaseProvider Provider instance Source code in tesla_ce_provider/provider/base.py @staticmethod def get_provider ( provider = None ): \"\"\" Create an instance of the provider :param provider: Full class name for the provider :type provider: str :return: Provider instance :rtype: BaseProvider \"\"\" # Get the provider class if provider is None : provider = os . getenv ( 'PROVIDER_CLASS' , None ) if provider is None : raise ModuleNotFoundError ( 'Provider implementation class is not provider. Set PROVIDER_CLASS.' ) components = provider . split ( '.' ) mod = __import__ ( components [ 0 ]) for comp in components [ 1 :]: mod = getattr ( mod , comp ) return mod ()","title":"get_provider()"},{"location":"client/#tesla_ce_provider.provider.base.BaseProvider.get_required_credentials","text":"Get the credentials required by the provider Returns: Type Description List of credential names (environment variables or secrets) Source code in tesla_ce_provider/provider/base.py @classmethod def get_required_credentials ( cls ): \"\"\" Get the credentials required by the provider :return: List of credential names (environment variables or secrets) \"\"\" return cls . _required_credentials","title":"get_required_credentials()"},{"location":"client/#tesla_ce_provider.provider.base.BaseProvider.log_trace","text":"Add a trace message for task. Only works if logger has been initialized using set_logger. Parameters: Name Type Description Default message Message to add to trace required Source code in tesla_ce_provider/provider/base.py def log_trace ( self , message ): \"\"\" Add a trace message for task. Only works if logger has been initialized using set_logger. :param message: Message to add to trace \"\"\" if self . _logger is not None : self . _logger ( message )","title":"log_trace()"},{"location":"client/#tesla_ce_provider.provider.base.BaseProvider.on_notification","text":"Respond to a notification task Parameters: Name Type Description Default key str The notification task unique key required info dict Information stored in the notification required Source code in tesla_ce_provider/provider/base.py def on_notification ( self , key , info ): \"\"\" Respond to a notification task :param key: The notification task unique key :type key: str :param info: Information stored in the notification :type info: dict \"\"\" raise NotImplementedError ( 'Method not implemented on provider' )","title":"on_notification()"},{"location":"client/#tesla_ce_provider.provider.base.BaseProvider.set_credential","text":"Set a provider credential Parameters: Name Type Description Default key Credential Key required value Credential value required Source code in tesla_ce_provider/provider/base.py def set_credential ( self , key , value ): \"\"\" Set a provider credential :param key: Credential Key :param value: Credential value \"\"\" self . _credentials [ key ] = value","title":"set_credential()"},{"location":"client/#tesla_ce_provider.provider.base.BaseProvider.set_logger","text":"Set a logging function Parameters: Name Type Description Default logger Logging function that accepts a message as argument required Source code in tesla_ce_provider/provider/base.py def set_logger ( self , logger ): \"\"\" Set a logging function :param logger: Logging function that accepts a message as argument \"\"\" self . _logger = logger","title":"set_logger()"},{"location":"client/#tesla_ce_provider.provider.base.BaseProvider.set_options","text":"Set options for the provider Parameters: Name Type Description Default options dict Provider options following provider options_scheme definition required Source code in tesla_ce_provider/provider/base.py def set_options ( self , options ): \"\"\" Set options for the provider :param options: Provider options following provider options_scheme definition :type options: dict \"\"\" pass","title":"set_options()"},{"location":"client/#tesla_ce_provider.provider.base.BaseProvider.update_delayed_result","text":"Schedule a delayed result Parameters: Name Type Description Default result Result required Source code in tesla_ce_provider/provider/base.py def update_delayed_result ( self , result ): \"\"\" Schedule a delayed result :param result: Result :type: tesla_ce_provider.result.DelayedResult \"\"\" self . _delayed_results . append ( result )","title":"update_delayed_result()"},{"location":"client/#tesla_ce_provider.provider.base.BaseProvider.update_or_create_notification","text":"Schedule a notification task Parameters: Name Type Description Default notification Notification object required Source code in tesla_ce_provider/provider/base.py def update_or_create_notification ( self , notification ): \"\"\" Schedule a notification task :param notification: Notification object :type: tesla_ce_provider.result.NotificationTask \"\"\" # Add notification to the list of notifications self . _notifications . append ( notification )","title":"update_or_create_notification()"},{"location":"client/#tesla_ce_provider.provider.base.BaseProvider.validate_sample","text":"Validate an enrolment sample Parameters: Name Type Description Default sample tesla_ce_provider.models.base.Sample Enrolment sample required validation_id int Validation identification required Returns: Type Description tesla_ce_provider.result.ValidationResult Validation result Source code in tesla_ce_provider/provider/base.py def validate_sample ( self , sample , validation_id ): \"\"\" Validate an enrolment sample :param sample: Enrolment sample :type sample: tesla_ce_provider.models.base.Sample :param validation_id: Validation identification :type validation_id: int :return: Validation result :rtype: tesla_ce_provider.result.ValidationResult \"\"\" raise NotImplementedError ( 'Method not implemented on provider' )","title":"validate_sample()"},{"location":"client/#tesla_ce_provider.provider.base.BaseProvider.verify","text":"Verify a learner request Parameters: Name Type Description Default request dict Verification request required model dict Provider model required Returns: Type Description tesla_ce_provider.result.VerificationResult Verification result Source code in tesla_ce_provider/provider/base.py def verify ( self , request , model ): \"\"\" Verify a learner request :param request: Verification request :type request: dict :param model: Provider model :type model: dict :return: Verification result :rtype: tesla_ce_provider.result.VerificationResult \"\"\" raise NotImplementedError ( 'Method not implemented on provider' )","title":"verify()"},{"location":"client/#tesla_ce_provider.provider.result","text":"TeSLA CE Provider Result module","title":"result"},{"location":"client/#tesla_ce_provider.provider.result.EnrolmentDelayedResult","text":"EnrolmentDelayedResult class","title":"EnrolmentDelayedResult"},{"location":"client/#tesla_ce_provider.provider.result.EnrolmentDelayedResult.__init__","text":"Create a delayed result Parameters: Name Type Description Default learner_id str Unique learner identification required sample_id int Unique sample identification required result EnrolmentResult Delayed result required task_id int Task identification required model object Model required info object An extra information about result None Source code in tesla_ce_provider/provider/result.py def __init__ ( self , learner_id , sample_id , result , task_id , model , info = None ): \"\"\" Create a delayed result :param learner_id: Unique learner identification :type learner_id: str :param sample_id: Unique sample identification :type sample_id: int :param result: Delayed result :type result: EnrolmentResult :param task_id: Task identification :type task_id: int :param model: Model :type model: object :param info: An extra information about result :type info: object \"\"\" self . result = result self . status = StatusCode . WAITING_EXTERNAL_SERVICE self . info = info self . learner_id = learner_id self . sample_id = sample_id self . task_id = task_id self . model = model","title":"__init__()"},{"location":"client/#tesla_ce_provider.provider.result.EnrolmentResult","text":"Enrolment Result class","title":"EnrolmentResult"},{"location":"client/#tesla_ce_provider.provider.result.EnrolmentResult.__init__","text":"Create an enrolment result instance for an enrolment sample Parameters: Name Type Description Default model dict Updated model object required can_analyse bool Whether with current model we can start analysing learner data, or we need more samples required valid bool Whether this sample is valid (True) or not (False) True error_message str An error message in case of invalid sample None used_samples list List of sample IDs used to create this model None Source code in tesla_ce_provider/provider/result.py def __init__ ( self , model , percentage , can_analyse , valid = True , error_message = None , used_samples = None ): \"\"\" Create an enrolment result instance for an enrolment sample :param model: Updated model object :type model: dict :param can_analyse: Whether with current model we can start analysing learner data, or we need more samples :type can_analyse: bool :param valid: Whether this sample is valid (True) or not (False) :type valid: bool :param error_message: An error message in case of invalid sample :type error_message: str :param used_samples: List of sample IDs used to create this model :type used_samples: list \"\"\" self . valid = valid self . error_message = error_message self . model = model self . can_analyse = can_analyse self . percentage = percentage self . used_samples = used_samples or []","title":"__init__()"},{"location":"client/#tesla_ce_provider.provider.result.NotificationTask","text":"Notification task class","title":"NotificationTask"},{"location":"client/#tesla_ce_provider.provider.result.NotificationTask.__init__","text":"Create a notification task Parameters: Name Type Description Default key str Unique key for the notification required countdown int Minimum delay in seconds for the notification None when datetime Minimum date and time in UTC for the notification None info dict Additional data for this task None Source code in tesla_ce_provider/provider/result.py def __init__ ( self , key , countdown = None , when = None , info = None ): \"\"\" Create a notification task :param key: Unique key for the notification :type key: str :param countdown: Minimum delay in seconds for the notification :type countdown: int :param when: Minimum date and time in UTC for the notification :type when: datetime :param info: Additional data for this task :type info: dict \"\"\" if when is None and countdown is None : countdown = 60 if when is None : when = datetime . datetime . utcnow () + datetime . timedelta ( seconds = countdown ) self . key = key self . when = when self . info = info","title":"__init__()"},{"location":"client/#tesla_ce_provider.provider.result.ValidationDelayedResult","text":"ValidationDelayedResult class","title":"ValidationDelayedResult"},{"location":"client/#tesla_ce_provider.provider.result.ValidationDelayedResult.__init__","text":"Create a delayed result Parameters: Name Type Description Default learner_id str Unique learner identification required sample_id int Unique sample identification required validation_id int Unique validation identification required result EnrolmentResult Delayed result required info object An extra information about result None Source code in tesla_ce_provider/provider/result.py def __init__ ( self , learner_id , sample_id , validation_id , result , info = None ): \"\"\" Create a delayed result :param learner_id: Unique learner identification :type learner_id: str :param sample_id: Unique sample identification :type sample_id: int :param validation_id: Unique validation identification :type validation_id: int :param result: Delayed result :type result: EnrolmentResult :param info: An extra information about result :type info: object \"\"\" self . result = result self . status = StatusCode . WAITING_EXTERNAL_SERVICE self . info = info self . learner_id = learner_id self . sample_id = sample_id self . validation_id = validation_id","title":"__init__()"},{"location":"client/#tesla_ce_provider.provider.result.ValidationResult","text":"Validation Result class","title":"ValidationResult"},{"location":"client/#tesla_ce_provider.provider.result.ValidationResult.__init__","text":"Create a validation result instance for an enrolment sample Parameters: Name Type Description Default valid bool Whether this sample is valid (True) or not (False) required error_message str An error message in case of invalid sample None info dict Additional information regarding the sample verification None message_code_id str Message code None Source code in tesla_ce_provider/provider/result.py def __init__ ( self , valid , error_message = None , info = None , contribution = None , message_code_id = None ): \"\"\" Create a validation result instance for an enrolment sample :param valid: Whether this sample is valid (True) or not (False) :type valid: bool :param error_message: An error message in case of invalid sample :type error_message: str :param info: Additional information regarding the sample verification :type info: dict :param message_code_id: Message code :type message_code_id: str \"\"\" if valid is True : self . status = StatusCode . PROCESSED else : self . status = StatusCode . ERROR self . error_message = error_message self . message_code_id = message_code_id self . info = info self . contribution = contribution","title":"__init__()"},{"location":"client/#tesla_ce_provider.provider.result.VerificationDelayedResult","text":"VerificationDelayedResult class","title":"VerificationDelayedResult"},{"location":"client/#tesla_ce_provider.provider.result.VerificationDelayedResult.__init__","text":"Create a delayed result Parameters: Name Type Description Default request_id int Unique request identification required result VerificationResult Delayed result required info object An extra information about result None Source code in tesla_ce_provider/provider/result.py def __init__ ( self , learner_id , request_id , result , info = None ): \"\"\" Create a delayed result :param request_id: Unique request identification :type request_id: int :param result: Delayed result :type result: VerificationResult :param info: An extra information about result :type info: object \"\"\" self . result = result self . status = StatusCode . WAITING_EXTERNAL_SERVICE self . info = info self . request_id = request_id","title":"__init__()"},{"location":"client/#tesla_ce_provider.provider.result.VerificationResult","text":"Verification Result class","title":"VerificationResult"},{"location":"client/#tesla_ce_provider.provider.result.VerificationResult.__init__","text":"Create a verification result instance for a verification request Parameters: Name Type Description Default valid bool Whether this request is valid (True) or not (False) required code AlertCode Alert level code for this request 1 error_message str An error message in case of invalid request None audit BaseAudit Additional information regarding the request verification None result float The numeric result from 0 to 1 for this sample None message_code Message Message related to this result None Source code in tesla_ce_provider/provider/result.py def __init__ ( self , valid , code = AlertCode . OK , error_message = None , audit = None , result = None , message_code = None ): \"\"\" Create a verification result instance for a verification request :param valid: Whether this request is valid (True) or not (False) :type valid: bool :param code: Alert level code for this request :type code: AlertCode :param error_message: An error message in case of invalid request :type error_message: str :param audit: Additional information regarding the request verification :type audit: BaseAudit :param result: The numeric result from 0 to 1 for this sample :type result: float :param message_code: Message related to this result :type message_code: Message \"\"\" if valid : self . status = StatusCode . PROCESSED else : self . status = StatusCode . ERROR self . error_message = error_message self . message_code = message_code self . audit = None if audit is not None : self . audit = audit . json () self . result = result self . code = code","title":"__init__()"},{"location":"client/#tesla_ce_provider.tasks","text":"TeSLA CE Provider tasks package","title":"tasks"},{"location":"client/#tesla_ce_provider.tasks.base","text":"TeSLA CE Base Task module","title":"base"},{"location":"client/#tesla_ce_provider.tasks.base.BaseTask","text":"Base Task for TeSLA Providers","title":"BaseTask"},{"location":"client/#tesla_ce_provider.tasks.base.BaseTask.client","text":"Access to the TeSLA CE Client instance Returns: Type Description tesla_ce_client.Client Client instance","title":"client"},{"location":"client/#tesla_ce_provider.tasks.base.BaseTask.provider","text":"Access to the provider implementation Returns: Type Description BaseProvider Provider instance","title":"provider"},{"location":"client/#tesla_ce_provider.tasks.base.BaseTask.add_trace","text":"Add task trace for current task. This trace is shown on logs at info state Parameters: Name Type Description Default message Message to be shown required Source code in tesla_ce_provider/tasks/base.py @staticmethod def add_trace ( message ): \"\"\" Add task trace for current task. This trace is shown on logs at info state :param message: Message to be shown \"\"\" if os . getenv ( 'LOG_TASK_TRACE' , False ) in [ '1' , 'True' , 'true' , 1 , True ]: task_logger . info ( message )","title":"add_trace()"},{"location":"client/#tesla_ce_provider.tasks.base.BaseTask.capture_exception","text":"Capture exception and send it to Sentry if it is enabled Parameters: Name Type Description Default exception Captured exception required Source code in tesla_ce_provider/tasks/base.py @staticmethod def capture_exception ( exception ): \"\"\" Capture exception and send it to Sentry if it is enabled :param exception: Captured exception \"\"\" if os . getenv ( 'SENTRY_ENABLED' ) in [ '1' , 1 , 'True' , 'yes' , 'true' ] and os . getenv ( 'SENTRY_DSN' ) is not None : capture_exception ( exception )","title":"capture_exception()"},{"location":"client/#tesla_ce_provider.tasks.base.BaseTask.delete_notification","text":"Delete a notification task Parameters: Name Type Description Default notification_id int Notification unique id required Source code in tesla_ce_provider/tasks/base.py def delete_notification ( self , notification_id ): \"\"\" Delete a notification task :param notification_id: Notification unique id :type notification_id: int \"\"\" return self . client . provider . notification . delete ( self . get_provider_id (), notification_id )","title":"delete_notification()"},{"location":"client/#tesla_ce_provider.tasks.base.BaseTask.get_model_data","text":"Download model data from storage url Parameters: Name Type Description Default url str Storage URL required Returns: Type Description dict Model data Source code in tesla_ce_provider/tasks/base.py def get_model_data ( self , url ): \"\"\" Download model data from storage url :param url: Storage URL :type url: str :return: Model data :rtype: dict \"\"\" if os . getenv ( 'SSL_VERIFY' , True ) in [ 'False' , 'false' , 0 , False , '0' ]: data_resp = requests . get ( url , verify = False ) else : data_resp = requests . get ( url ) if data_resp . status_code != 200 : self . retry ( countdown = 5 * 60 , max_retries = 3 ) return data_resp . json ()","title":"get_model_data()"},{"location":"client/#tesla_ce_provider.tasks.base.BaseTask.get_notification_data","text":"Get information for a given notification Parameters: Name Type Description Default notification_id int Notification unique id required Returns: Type Description dict Notification object Source code in tesla_ce_provider/tasks/base.py def get_notification_data ( self , notification_id ): \"\"\" Get information for a given notification :param notification_id: Notification unique id :type notification_id: int :return: Notification object :rtype: dict \"\"\" return self . client . provider . notification . get ( self . get_provider_id (), notification_id )","title":"get_notification_data()"},{"location":"client/#tesla_ce_provider.tasks.base.BaseTask.get_provider_id","text":"Get the Provider ID Returns: Type Description int Provider ID Source code in tesla_ce_provider/tasks/base.py def get_provider_id ( self ): \"\"\" Get the Provider ID :return: Provider ID :rtype: int \"\"\" return self . _client . _connector . get_provider_id ()","title":"get_provider_id()"},{"location":"client/#tesla_ce_provider.tasks.base.BaseTask.get_provider_info","text":"Get the Provider information Returns: Type Description dict Provider information Source code in tesla_ce_provider/tasks/base.py def get_provider_info ( self ): \"\"\" Get the Provider information :return: Provider information :rtype: dict \"\"\" return self . _client . provider . get ( self . get_provider_id ())","title":"get_provider_info()"},{"location":"client/#tesla_ce_provider.tasks.base.BaseTask.get_provider_options","text":"Get the Provider options Returns: Type Description dict Provider options Source code in tesla_ce_provider/tasks/base.py def get_provider_options ( self ): \"\"\" Get the Provider options :return: Provider options :rtype: dict \"\"\" provider_info = self . _client . provider . get ( self . get_provider_id ()) if provider_info is not None and 'options' in provider_info : return provider_info [ 'options' ] return None","title":"get_provider_options()"},{"location":"client/#tesla_ce_provider.tasks.base.BaseTask.get_request_data","text":"Download request data from storage url Parameters: Name Type Description Default url str Storage URL required Returns: Type Description dict Request data Source code in tesla_ce_provider/tasks/base.py def get_request_data ( self , url ): \"\"\" Download request data from storage url :param url: Storage URL :type url: str :return: Request data :rtype: dict \"\"\" return self . get_sample_data ( url )","title":"get_request_data()"},{"location":"client/#tesla_ce_provider.tasks.base.BaseTask.get_sample_data","text":"Download sample data from storage url Parameters: Name Type Description Default url str Storage URL required Returns: Type Description dict Sample data Source code in tesla_ce_provider/tasks/base.py def get_sample_data ( self , url ): \"\"\" Download sample data from storage url :param url: Storage URL :type url: str :return: Sample data :rtype: dict \"\"\" if os . getenv ( 'SSL_VERIFY' , True ) in [ 'False' , 'false' , 0 , False , '0' ]: data_resp = requests . get ( url , verify = False ) else : data_resp = requests . get ( url ) if data_resp . status_code != 200 : self . retry ( countdown = 5 * 60 , max_retries = 3 ) return data_resp . json ()","title":"get_sample_data()"},{"location":"client/#tesla_ce_provider.tasks.base.BaseTask.get_sample_validations","text":"Get sample available validations Parameters: Name Type Description Default sample dict A sample object required Returns: Type Description Validation generator Source code in tesla_ce_provider/tasks/base.py def get_sample_validations ( self , sample ): \"\"\" Get sample available validations :param sample: A sample object :type sample: dict :return: Validation generator \"\"\" validations = self . client . provider . enrolment . get_sample_validation_list ( self . get_provider_id (), sample [ 'learner_id' ], sample [ 'id' ]) for validation in validations [ 'results' ]: if 'info' in validation and validation [ 'info' ] is not None : data = self . get_sample_data ( validation [ 'info' ]) validation [ 'info' ] = data validation_data = parse_validation_data ( data ) if validation_data is not None : yield validation_data","title":"get_sample_validations()"},{"location":"client/#tesla_ce_provider.tasks.base.BaseTask.get_validated_enrolment_samples","text":"Return the list of enrolment samples that are available for this learner. Only returns those samples that are not included in current model. Parameters: Name Type Description Default learner_id str The learner UUID required Returns: Type Description list Enrolment samples Source code in tesla_ce_provider/tasks/base.py def get_validated_enrolment_samples ( self , learner_id ): \"\"\" Return the list of enrolment samples that are available for this learner. Only returns those samples that are not included in current model. :param learner_id: The learner UUID :type learner_id: str :return: Enrolment samples :rtype: list \"\"\" result = self . _client . provider . enrolment . get_available_samples ( self . get_provider_id (), learner_id ) if result is None or result [ 'count' ] == 0 : return None while result is not None : page = [] # Read data for each sample for sample in result [ 'results' ]: # Get the validations sample [ 'validations' ] = self . get_sample_validations ( sample ) # Get the data sample_data = self . get_sample_data ( sample [ 'data' ]) sample [ 'data' ] = sample_data page . append ( sample ) for sample in page : yield Sample ( sample ) # Move to next page result = self . _client . get_next ( result )","title":"get_validated_enrolment_samples()"},{"location":"client/#tesla_ce_provider.tasks.base.BaseTask.on_failure","text":"Perform default actions when an uncontrolled exception is raised Parameters: Name Type Description Default exc Exception The exception raised by the task. required task_id uuid The task identifier required args tuple Original arguments for the task that failed. required kwargs dict Original keyword arguments for the task that failed. required einfo required Source code in tesla_ce_provider/tasks/base.py def on_failure ( self , exc , task_id , args , kwargs , einfo ): \"\"\" Perform default actions when an uncontrolled exception is raised :param exc: The exception raised by the task. :type exc: Exception :param task_id: The task identifier :type task_id: uuid :param args: Original arguments for the task that failed. :type args: tuple :param kwargs: Original keyword arguments for the task that failed. :type kwargs: dict :param einfo: \"\"\" self . capture_exception ( exc ) if self . _unlock_on_failure and self . _learner is not None : self . client . provider . enrolment . unlock_model ( self . get_provider_id (), self . _learner , self . request . id )","title":"on_failure()"},{"location":"client/#tesla_ce_provider.tasks.base.BaseTask.send_delayed_results","text":"Send notification tasks Source code in tesla_ce_provider/tasks/base.py def send_delayed_results ( self ): \"\"\" Send notification tasks \"\"\" for delayed_result in self . provider . delayed_results : if isinstance ( delayed_result , ValidationDelayedResult ): self . client . provider . enrolment . set_sample_validation ( self . get_provider_id (), delayed_result . learner_id , delayed_result . sample_id , delayed_result . validation_id , delayed_result . result . json () ) if isinstance ( delayed_result , EnrolmentDelayedResult ): model = delayed_result . model if delayed_result . result . valid : model [ 'model' ] = delayed_result . result . model model [ 'percentage' ] = delayed_result . result . percentage model [ 'can_analyse' ] = delayed_result . result . can_analyse model [ 'used_samples' ] = delayed_result . result . used_samples # Store new model self . add_trace ( 'EnrolmentTask: Saving new model' ) self . client . provider . enrolment . save_model ( self . get_provider_id (), delayed_result . learner_id , self . request . id , model ) if isinstance ( delayed_result , VerificationDelayedResult ): self . client . provider . verification . set_provider_request_result ( provider_id = self . get_provider_id (), request_id = delayed_result . request_id , result = delayed_result . result . json ()) self . provider . delayed_results . clear ()","title":"send_delayed_results()"},{"location":"client/#tesla_ce_provider.tasks.base.BaseTask.send_notifications","text":"Send notification tasks Source code in tesla_ce_provider/tasks/base.py def send_notifications ( self ): \"\"\" Send notification tasks \"\"\" for notification in self . provider . notifications : self . client . provider . notification . update_or_create ( self . get_provider_id (), notification . key , notification . when , notification . info ) self . provider . notifications . clear ()","title":"send_notifications()"},{"location":"client/#tesla_ce_provider.tasks.enrolment","text":"TeSLA CE Enrolment related tasks module","title":"enrolment"},{"location":"client/#tesla_ce_provider.tasks.notification","text":"TeSLA CE Notification tasks module","title":"notification"},{"location":"client/#tesla_ce_provider.tasks.verification","text":"TeSLA CE Verification tasks module","title":"verification"}]}