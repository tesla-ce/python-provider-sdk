{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"TeSLA CE Providers Python SDK","text":":warning: This repository is under construction. Final release of TeSLA Community Edition source code is expected by the end of 2021"},{"location":"client/","title":"Provider","text":"<p>TeSLA CE Provider Package</p>"},{"location":"client/#tesla_ce_provider.BaseProvider","title":"<code>BaseProvider</code>","text":"<p>Base class for TeSLA CE Instrument providers</p> Source code in <code>src/tesla_ce_provider/provider/base.py</code> <pre><code>class BaseProvider:\n\"\"\" Base class for TeSLA CE Instrument providers \"\"\"\n\n    #: Credentials required by this provider\n    _required_credentials = []\n\n    #: Credentials read from environment variables or secrets\n    _credentials = {}\n\n    def __init__(self):\n        #: Notification tasks\n        self._notifications = []\n\n        #: DelayedResults tasks\n        self._delayed_results = []\n\n        #: Provider ID\n        self.provider_id = None\n\n        #: Provider information\n        self.info = None\n\n        #: Instrument details\n        self.instrument = None\n\n        #: Base model\n        self._model_class = models.BaseModel\n\n    @classmethod\n    def get_required_credentials(cls):\n\"\"\"\n            Get the credentials required by the provider\n            :return: List of credential names (environment variables or secrets)\n        \"\"\"\n        return cls._required_credentials\n\n    @property\n    def credentials(self):\n\"\"\"\n            Access to the provider credentials\n            :return: Provider credentials\n        \"\"\"\n        return self._credentials\n\n    def set_credential(self, key, value):\n\"\"\"\n            Set a provider credential\n\n            :param key: Credential Key\n            :param value: Credential value\n        \"\"\"\n        self._credentials[key] = value\n\n    @staticmethod\n    def get_provider(provider=None):\n\"\"\"\n            Create an instance of the provider\n            :param provider: Full class name for the provider\n            :type provider: str\n            :return: Provider instance\n            :rtype: BaseProvider\n        \"\"\"\n        # Get the provider class\n        if provider is None:\n            provider = os.getenv('PROVIDER_CLASS', None)\n        if provider is None:\n            raise ModuleNotFoundError('Provider implementation class is not provider. Set PROVIDER_CLASS.')\n        components = provider.split('.')\n        mod = __import__(components[0])\n        for comp in components[1:]:\n            mod = getattr(mod, comp)\n        return mod()\n\n    def set_logger(self, logger):\n\"\"\"\n            Set a logging function\n            :param logger: Logging function that accepts a message as argument\n        \"\"\"\n        self._logger = logger\n\n    def log_trace(self, message):\n\"\"\"\n            Add a trace message for task. Only works if logger has been initialized using set_logger.\n            :param message: Message to add to trace\n        \"\"\"\n        if self._logger is not None:\n            self._logger(message)\n\n    def set_options(self, options):\n\"\"\"\n            Set options for the provider\n            :param options: Provider options following provider options_scheme definition\n            :type options: dict\n        \"\"\"\n        pass\n\n    def verify(self, request, model):\n\"\"\"\n            Verify a learner request\n            :param request: Verification request\n            :type request: dict\n            :param model: Provider model\n            :type model: dict\n            :return: Verification result\n            :rtype: tesla_ce_provider.result.VerificationResult\n        \"\"\"\n        raise NotImplementedError('Method not implemented on provider')\n\n    def enrol(self, samples, model=None):\n\"\"\"\n            Update the model with a new enrolment sample\n            :param samples: Enrolment samples\n            :type samples: list\n            :param model: Current model\n            :type model: dict\n            :return: Enrolment result\n            :rtype: tesla_ce_provider.result.EnrolmentResult\n        \"\"\"\n        raise NotImplementedError('Method not implemented on provider')\n\n    def validate_sample(self, sample, validation_id):\n\"\"\"\n            Validate an enrolment sample\n            :param sample: Enrolment sample\n            :type sample: tesla_ce_provider.models.base.Sample\n            :param validation_id: Validation identification\n            :type validation_id: int\n            :return: Validation result\n            :rtype: tesla_ce_provider.result.ValidationResult\n        \"\"\"\n        raise NotImplementedError('Method not implemented on provider')\n\n    def on_notification(self, key, info):\n\"\"\"\n            Respond to a notification task\n            :param key: The notification task unique key\n            :type key: str\n            :param info: Information stored in the notification\n            :type info: dict\n        \"\"\"\n        raise NotImplementedError('Method not implemented on provider')\n\n    def update_or_create_notification(self, notification):\n\"\"\"\n            Schedule a notification task\n\n            :param notification: Notification object\n            :type: tesla_ce_provider.result.NotificationTask\n        \"\"\"\n        # Add notification to the list of notifications\n        self._notifications.append(notification)\n\n    def update_delayed_result(self, result):\n\"\"\"\n            Schedule a delayed result\n\n            :param result: Result\n            :type: tesla_ce_provider.result.DelayedResult\n        \"\"\"\n        self._delayed_results.append(result)\n\n    @property\n    def notifications(self):\n\"\"\"\n            Access to the list of notifications\n\n            :return: List of notifications\n            :rtype: list\n        \"\"\"\n        return self._notifications\n\n    @property\n    def delayed_results(self):\n\"\"\"\n            Access to the list of delayed_results\n\n            :return: List of delayed_results\n            :rtype: list\n        \"\"\"\n        return self._delayed_results\n</code></pre>"},{"location":"client/#tesla_ce_provider.provider.base.BaseProvider.credentials","title":"<code>credentials</code>  <code>property</code>","text":"<p>Access to the provider credentials :return: Provider credentials</p>"},{"location":"client/#tesla_ce_provider.provider.base.BaseProvider.delayed_results","title":"<code>delayed_results</code>  <code>property</code>","text":"<p>Access to the list of delayed_results</p> <p>:return: List of delayed_results :rtype: list</p>"},{"location":"client/#tesla_ce_provider.provider.base.BaseProvider.notifications","title":"<code>notifications</code>  <code>property</code>","text":"<p>Access to the list of notifications</p> <p>:return: List of notifications :rtype: list</p>"},{"location":"client/#tesla_ce_provider.provider.base.BaseProvider.enrol","title":"<code>enrol(samples, model=None)</code>","text":"<p>Update the model with a new enrolment sample :param samples: Enrolment samples :type samples: list :param model: Current model :type model: dict :return: Enrolment result :rtype: tesla_ce_provider.result.EnrolmentResult</p> Source code in <code>src/tesla_ce_provider/provider/base.py</code> <pre><code>def enrol(self, samples, model=None):\n\"\"\"\n        Update the model with a new enrolment sample\n        :param samples: Enrolment samples\n        :type samples: list\n        :param model: Current model\n        :type model: dict\n        :return: Enrolment result\n        :rtype: tesla_ce_provider.result.EnrolmentResult\n    \"\"\"\n    raise NotImplementedError('Method not implemented on provider')\n</code></pre>"},{"location":"client/#tesla_ce_provider.provider.base.BaseProvider.get_provider","title":"<code>get_provider(provider=None)</code>  <code>staticmethod</code>","text":"<p>Create an instance of the provider :param provider: Full class name for the provider :type provider: str :return: Provider instance :rtype: BaseProvider</p> Source code in <code>src/tesla_ce_provider/provider/base.py</code> <pre><code>@staticmethod\ndef get_provider(provider=None):\n\"\"\"\n        Create an instance of the provider\n        :param provider: Full class name for the provider\n        :type provider: str\n        :return: Provider instance\n        :rtype: BaseProvider\n    \"\"\"\n    # Get the provider class\n    if provider is None:\n        provider = os.getenv('PROVIDER_CLASS', None)\n    if provider is None:\n        raise ModuleNotFoundError('Provider implementation class is not provider. Set PROVIDER_CLASS.')\n    components = provider.split('.')\n    mod = __import__(components[0])\n    for comp in components[1:]:\n        mod = getattr(mod, comp)\n    return mod()\n</code></pre>"},{"location":"client/#tesla_ce_provider.provider.base.BaseProvider.get_required_credentials","title":"<code>get_required_credentials()</code>  <code>classmethod</code>","text":"<p>Get the credentials required by the provider :return: List of credential names (environment variables or secrets)</p> Source code in <code>src/tesla_ce_provider/provider/base.py</code> <pre><code>@classmethod\ndef get_required_credentials(cls):\n\"\"\"\n        Get the credentials required by the provider\n        :return: List of credential names (environment variables or secrets)\n    \"\"\"\n    return cls._required_credentials\n</code></pre>"},{"location":"client/#tesla_ce_provider.provider.base.BaseProvider.log_trace","title":"<code>log_trace(message)</code>","text":"<p>Add a trace message for task. Only works if logger has been initialized using set_logger. :param message: Message to add to trace</p> Source code in <code>src/tesla_ce_provider/provider/base.py</code> <pre><code>def log_trace(self, message):\n\"\"\"\n        Add a trace message for task. Only works if logger has been initialized using set_logger.\n        :param message: Message to add to trace\n    \"\"\"\n    if self._logger is not None:\n        self._logger(message)\n</code></pre>"},{"location":"client/#tesla_ce_provider.provider.base.BaseProvider.on_notification","title":"<code>on_notification(key, info)</code>","text":"<p>Respond to a notification task :param key: The notification task unique key :type key: str :param info: Information stored in the notification :type info: dict</p> Source code in <code>src/tesla_ce_provider/provider/base.py</code> <pre><code>def on_notification(self, key, info):\n\"\"\"\n        Respond to a notification task\n        :param key: The notification task unique key\n        :type key: str\n        :param info: Information stored in the notification\n        :type info: dict\n    \"\"\"\n    raise NotImplementedError('Method not implemented on provider')\n</code></pre>"},{"location":"client/#tesla_ce_provider.provider.base.BaseProvider.set_credential","title":"<code>set_credential(key, value)</code>","text":"<p>Set a provider credential</p> <p>:param key: Credential Key :param value: Credential value</p> Source code in <code>src/tesla_ce_provider/provider/base.py</code> <pre><code>def set_credential(self, key, value):\n\"\"\"\n        Set a provider credential\n\n        :param key: Credential Key\n        :param value: Credential value\n    \"\"\"\n    self._credentials[key] = value\n</code></pre>"},{"location":"client/#tesla_ce_provider.provider.base.BaseProvider.set_logger","title":"<code>set_logger(logger)</code>","text":"<p>Set a logging function :param logger: Logging function that accepts a message as argument</p> Source code in <code>src/tesla_ce_provider/provider/base.py</code> <pre><code>def set_logger(self, logger):\n\"\"\"\n        Set a logging function\n        :param logger: Logging function that accepts a message as argument\n    \"\"\"\n    self._logger = logger\n</code></pre>"},{"location":"client/#tesla_ce_provider.provider.base.BaseProvider.set_options","title":"<code>set_options(options)</code>","text":"<p>Set options for the provider :param options: Provider options following provider options_scheme definition :type options: dict</p> Source code in <code>src/tesla_ce_provider/provider/base.py</code> <pre><code>def set_options(self, options):\n\"\"\"\n        Set options for the provider\n        :param options: Provider options following provider options_scheme definition\n        :type options: dict\n    \"\"\"\n    pass\n</code></pre>"},{"location":"client/#tesla_ce_provider.provider.base.BaseProvider.update_delayed_result","title":"<code>update_delayed_result(result)</code>","text":"<p>Schedule a delayed result</p> <p>:param result: Result :type: tesla_ce_provider.result.DelayedResult</p> Source code in <code>src/tesla_ce_provider/provider/base.py</code> <pre><code>def update_delayed_result(self, result):\n\"\"\"\n        Schedule a delayed result\n\n        :param result: Result\n        :type: tesla_ce_provider.result.DelayedResult\n    \"\"\"\n    self._delayed_results.append(result)\n</code></pre>"},{"location":"client/#tesla_ce_provider.provider.base.BaseProvider.update_or_create_notification","title":"<code>update_or_create_notification(notification)</code>","text":"<p>Schedule a notification task</p> <p>:param notification: Notification object :type: tesla_ce_provider.result.NotificationTask</p> Source code in <code>src/tesla_ce_provider/provider/base.py</code> <pre><code>def update_or_create_notification(self, notification):\n\"\"\"\n        Schedule a notification task\n\n        :param notification: Notification object\n        :type: tesla_ce_provider.result.NotificationTask\n    \"\"\"\n    # Add notification to the list of notifications\n    self._notifications.append(notification)\n</code></pre>"},{"location":"client/#tesla_ce_provider.provider.base.BaseProvider.validate_sample","title":"<code>validate_sample(sample, validation_id)</code>","text":"<p>Validate an enrolment sample :param sample: Enrolment sample :type sample: tesla_ce_provider.models.base.Sample :param validation_id: Validation identification :type validation_id: int :return: Validation result :rtype: tesla_ce_provider.result.ValidationResult</p> Source code in <code>src/tesla_ce_provider/provider/base.py</code> <pre><code>def validate_sample(self, sample, validation_id):\n\"\"\"\n        Validate an enrolment sample\n        :param sample: Enrolment sample\n        :type sample: tesla_ce_provider.models.base.Sample\n        :param validation_id: Validation identification\n        :type validation_id: int\n        :return: Validation result\n        :rtype: tesla_ce_provider.result.ValidationResult\n    \"\"\"\n    raise NotImplementedError('Method not implemented on provider')\n</code></pre>"},{"location":"client/#tesla_ce_provider.provider.base.BaseProvider.verify","title":"<code>verify(request, model)</code>","text":"<p>Verify a learner request :param request: Verification request :type request: dict :param model: Provider model :type model: dict :return: Verification result :rtype: tesla_ce_provider.result.VerificationResult</p> Source code in <code>src/tesla_ce_provider/provider/base.py</code> <pre><code>def verify(self, request, model):\n\"\"\"\n        Verify a learner request\n        :param request: Verification request\n        :type request: dict\n        :param model: Provider model\n        :type model: dict\n        :return: Verification result\n        :rtype: tesla_ce_provider.result.VerificationResult\n    \"\"\"\n    raise NotImplementedError('Method not implemented on provider')\n</code></pre>"}]}